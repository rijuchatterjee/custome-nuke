// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/lcheung5/go/pkg/mod/github.com/aws/aws-sdk-go@v1.34.12/service/waf/wafiface/interface.go

// Package mock_wafiface is a generated GoMock package.
package mock_wafiface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	waf "github.com/aws/aws-sdk-go/service/waf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWAFAPI is a mock of WAFAPI interface
type MockWAFAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWAFAPIMockRecorder
}

// MockWAFAPIMockRecorder is the mock recorder for MockWAFAPI
type MockWAFAPIMockRecorder struct {
	mock *MockWAFAPI
}

// NewMockWAFAPI creates a new mock instance
func NewMockWAFAPI(ctrl *gomock.Controller) *MockWAFAPI {
	mock := &MockWAFAPI{ctrl: ctrl}
	mock.recorder = &MockWAFAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWAFAPI) EXPECT() *MockWAFAPIMockRecorder {
	return m.recorder
}

// CreateByteMatchSet mocks base method
func (m *MockWAFAPI) CreateByteMatchSet(arg0 *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByteMatchSet indicates an expected call of CreateByteMatchSet
func (mr *MockWAFAPIMockRecorder) CreateByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByteMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateByteMatchSet), arg0)
}

// CreateByteMatchSetWithContext mocks base method
func (m *MockWAFAPI) CreateByteMatchSetWithContext(arg0 aws.Context, arg1 *waf.CreateByteMatchSetInput, arg2 ...request.Option) (*waf.CreateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByteMatchSetWithContext indicates an expected call of CreateByteMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByteMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateByteMatchSetWithContext), varargs...)
}

// CreateByteMatchSetRequest mocks base method
func (m *MockWAFAPI) CreateByteMatchSetRequest(arg0 *waf.CreateByteMatchSetInput) (*request.Request, *waf.CreateByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateByteMatchSetOutput)
	return ret0, ret1
}

// CreateByteMatchSetRequest indicates an expected call of CreateByteMatchSetRequest
func (mr *MockWAFAPIMockRecorder) CreateByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByteMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateByteMatchSetRequest), arg0)
}

// CreateGeoMatchSet mocks base method
func (m *MockWAFAPI) CreateGeoMatchSet(arg0 *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeoMatchSet indicates an expected call of CreateGeoMatchSet
func (mr *MockWAFAPIMockRecorder) CreateGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeoMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateGeoMatchSet), arg0)
}

// CreateGeoMatchSetWithContext mocks base method
func (m *MockWAFAPI) CreateGeoMatchSetWithContext(arg0 aws.Context, arg1 *waf.CreateGeoMatchSetInput, arg2 ...request.Option) (*waf.CreateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeoMatchSetWithContext indicates an expected call of CreateGeoMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeoMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateGeoMatchSetWithContext), varargs...)
}

// CreateGeoMatchSetRequest mocks base method
func (m *MockWAFAPI) CreateGeoMatchSetRequest(arg0 *waf.CreateGeoMatchSetInput) (*request.Request, *waf.CreateGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateGeoMatchSetOutput)
	return ret0, ret1
}

// CreateGeoMatchSetRequest indicates an expected call of CreateGeoMatchSetRequest
func (mr *MockWAFAPIMockRecorder) CreateGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeoMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateGeoMatchSetRequest), arg0)
}

// CreateIPSet mocks base method
func (m *MockWAFAPI) CreateIPSet(arg0 *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPSet", arg0)
	ret0, _ := ret[0].(*waf.CreateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPSet indicates an expected call of CreateIPSet
func (mr *MockWAFAPIMockRecorder) CreateIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateIPSet), arg0)
}

// CreateIPSetWithContext mocks base method
func (m *MockWAFAPI) CreateIPSetWithContext(arg0 aws.Context, arg1 *waf.CreateIPSetInput, arg2 ...request.Option) (*waf.CreateIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPSetWithContext indicates an expected call of CreateIPSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateIPSetWithContext), varargs...)
}

// CreateIPSetRequest mocks base method
func (m *MockWAFAPI) CreateIPSetRequest(arg0 *waf.CreateIPSetInput) (*request.Request, *waf.CreateIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateIPSetOutput)
	return ret0, ret1
}

// CreateIPSetRequest indicates an expected call of CreateIPSetRequest
func (mr *MockWAFAPIMockRecorder) CreateIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateIPSetRequest), arg0)
}

// CreateRateBasedRule mocks base method
func (m *MockWAFAPI) CreateRateBasedRule(arg0 *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.CreateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRateBasedRule indicates an expected call of CreateRateBasedRule
func (mr *MockWAFAPIMockRecorder) CreateRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateBasedRule", reflect.TypeOf((*MockWAFAPI)(nil).CreateRateBasedRule), arg0)
}

// CreateRateBasedRuleWithContext mocks base method
func (m *MockWAFAPI) CreateRateBasedRuleWithContext(arg0 aws.Context, arg1 *waf.CreateRateBasedRuleInput, arg2 ...request.Option) (*waf.CreateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRateBasedRuleWithContext indicates an expected call of CreateRateBasedRuleWithContext
func (mr *MockWAFAPIMockRecorder) CreateRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateBasedRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateRateBasedRuleWithContext), varargs...)
}

// CreateRateBasedRuleRequest mocks base method
func (m *MockWAFAPI) CreateRateBasedRuleRequest(arg0 *waf.CreateRateBasedRuleInput) (*request.Request, *waf.CreateRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRateBasedRuleOutput)
	return ret0, ret1
}

// CreateRateBasedRuleRequest indicates an expected call of CreateRateBasedRuleRequest
func (mr *MockWAFAPIMockRecorder) CreateRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateBasedRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateRateBasedRuleRequest), arg0)
}

// CreateRegexMatchSet mocks base method
func (m *MockWAFAPI) CreateRegexMatchSet(arg0 *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexMatchSet indicates an expected call of CreateRegexMatchSet
func (mr *MockWAFAPIMockRecorder) CreateRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateRegexMatchSet), arg0)
}

// CreateRegexMatchSetWithContext mocks base method
func (m *MockWAFAPI) CreateRegexMatchSetWithContext(arg0 aws.Context, arg1 *waf.CreateRegexMatchSetInput, arg2 ...request.Option) (*waf.CreateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexMatchSetWithContext indicates an expected call of CreateRegexMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateRegexMatchSetWithContext), varargs...)
}

// CreateRegexMatchSetRequest mocks base method
func (m *MockWAFAPI) CreateRegexMatchSetRequest(arg0 *waf.CreateRegexMatchSetInput) (*request.Request, *waf.CreateRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRegexMatchSetOutput)
	return ret0, ret1
}

// CreateRegexMatchSetRequest indicates an expected call of CreateRegexMatchSetRequest
func (mr *MockWAFAPIMockRecorder) CreateRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateRegexMatchSetRequest), arg0)
}

// CreateRegexPatternSet mocks base method
func (m *MockWAFAPI) CreateRegexPatternSet(arg0 *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.CreateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexPatternSet indicates an expected call of CreateRegexPatternSet
func (mr *MockWAFAPIMockRecorder) CreateRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateRegexPatternSet), arg0)
}

// CreateRegexPatternSetWithContext mocks base method
func (m *MockWAFAPI) CreateRegexPatternSetWithContext(arg0 aws.Context, arg1 *waf.CreateRegexPatternSetInput, arg2 ...request.Option) (*waf.CreateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexPatternSetWithContext indicates an expected call of CreateRegexPatternSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateRegexPatternSetWithContext), varargs...)
}

// CreateRegexPatternSetRequest mocks base method
func (m *MockWAFAPI) CreateRegexPatternSetRequest(arg0 *waf.CreateRegexPatternSetInput) (*request.Request, *waf.CreateRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRegexPatternSetOutput)
	return ret0, ret1
}

// CreateRegexPatternSetRequest indicates an expected call of CreateRegexPatternSetRequest
func (mr *MockWAFAPIMockRecorder) CreateRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateRegexPatternSetRequest), arg0)
}

// CreateRule mocks base method
func (m *MockWAFAPI) CreateRule(arg0 *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0)
	ret0, _ := ret[0].(*waf.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule
func (mr *MockWAFAPIMockRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockWAFAPI)(nil).CreateRule), arg0)
}

// CreateRuleWithContext mocks base method
func (m *MockWAFAPI) CreateRuleWithContext(arg0 aws.Context, arg1 *waf.CreateRuleInput, arg2 ...request.Option) (*waf.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleWithContext indicates an expected call of CreateRuleWithContext
func (mr *MockWAFAPIMockRecorder) CreateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateRuleWithContext), varargs...)
}

// CreateRuleRequest mocks base method
func (m *MockWAFAPI) CreateRuleRequest(arg0 *waf.CreateRuleInput) (*request.Request, *waf.CreateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRuleOutput)
	return ret0, ret1
}

// CreateRuleRequest indicates an expected call of CreateRuleRequest
func (mr *MockWAFAPIMockRecorder) CreateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateRuleRequest), arg0)
}

// CreateRuleGroup mocks base method
func (m *MockWAFAPI) CreateRuleGroup(arg0 *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.CreateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroup indicates an expected call of CreateRuleGroup
func (mr *MockWAFAPIMockRecorder) CreateRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroup", reflect.TypeOf((*MockWAFAPI)(nil).CreateRuleGroup), arg0)
}

// CreateRuleGroupWithContext mocks base method
func (m *MockWAFAPI) CreateRuleGroupWithContext(arg0 aws.Context, arg1 *waf.CreateRuleGroupInput, arg2 ...request.Option) (*waf.CreateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroupWithContext indicates an expected call of CreateRuleGroupWithContext
func (mr *MockWAFAPIMockRecorder) CreateRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateRuleGroupWithContext), varargs...)
}

// CreateRuleGroupRequest mocks base method
func (m *MockWAFAPI) CreateRuleGroupRequest(arg0 *waf.CreateRuleGroupInput) (*request.Request, *waf.CreateRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRuleGroupOutput)
	return ret0, ret1
}

// CreateRuleGroupRequest indicates an expected call of CreateRuleGroupRequest
func (mr *MockWAFAPIMockRecorder) CreateRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateRuleGroupRequest), arg0)
}

// CreateSizeConstraintSet mocks base method
func (m *MockWAFAPI) CreateSizeConstraintSet(arg0 *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.CreateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSizeConstraintSet indicates an expected call of CreateSizeConstraintSet
func (mr *MockWAFAPIMockRecorder) CreateSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSizeConstraintSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateSizeConstraintSet), arg0)
}

// CreateSizeConstraintSetWithContext mocks base method
func (m *MockWAFAPI) CreateSizeConstraintSetWithContext(arg0 aws.Context, arg1 *waf.CreateSizeConstraintSetInput, arg2 ...request.Option) (*waf.CreateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSizeConstraintSetWithContext indicates an expected call of CreateSizeConstraintSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateSizeConstraintSetWithContext), varargs...)
}

// CreateSizeConstraintSetRequest mocks base method
func (m *MockWAFAPI) CreateSizeConstraintSetRequest(arg0 *waf.CreateSizeConstraintSetInput) (*request.Request, *waf.CreateSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateSizeConstraintSetOutput)
	return ret0, ret1
}

// CreateSizeConstraintSetRequest indicates an expected call of CreateSizeConstraintSetRequest
func (mr *MockWAFAPIMockRecorder) CreateSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSizeConstraintSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateSizeConstraintSetRequest), arg0)
}

// CreateSqlInjectionMatchSet mocks base method
func (m *MockWAFAPI) CreateSqlInjectionMatchSet(arg0 *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSqlInjectionMatchSet indicates an expected call of CreateSqlInjectionMatchSet
func (mr *MockWAFAPIMockRecorder) CreateSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSqlInjectionMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateSqlInjectionMatchSet), arg0)
}

// CreateSqlInjectionMatchSetWithContext mocks base method
func (m *MockWAFAPI) CreateSqlInjectionMatchSetWithContext(arg0 aws.Context, arg1 *waf.CreateSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSqlInjectionMatchSetWithContext indicates an expected call of CreateSqlInjectionMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateSqlInjectionMatchSetWithContext), varargs...)
}

// CreateSqlInjectionMatchSetRequest mocks base method
func (m *MockWAFAPI) CreateSqlInjectionMatchSetRequest(arg0 *waf.CreateSqlInjectionMatchSetInput) (*request.Request, *waf.CreateSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// CreateSqlInjectionMatchSetRequest indicates an expected call of CreateSqlInjectionMatchSetRequest
func (mr *MockWAFAPIMockRecorder) CreateSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateSqlInjectionMatchSetRequest), arg0)
}

// CreateWebACL mocks base method
func (m *MockWAFAPI) CreateWebACL(arg0 *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACL", arg0)
	ret0, _ := ret[0].(*waf.CreateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACL indicates an expected call of CreateWebACL
func (mr *MockWAFAPIMockRecorder) CreateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACL", reflect.TypeOf((*MockWAFAPI)(nil).CreateWebACL), arg0)
}

// CreateWebACLWithContext mocks base method
func (m *MockWAFAPI) CreateWebACLWithContext(arg0 aws.Context, arg1 *waf.CreateWebACLInput, arg2 ...request.Option) (*waf.CreateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACLWithContext indicates an expected call of CreateWebACLWithContext
func (mr *MockWAFAPIMockRecorder) CreateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateWebACLWithContext), varargs...)
}

// CreateWebACLRequest mocks base method
func (m *MockWAFAPI) CreateWebACLRequest(arg0 *waf.CreateWebACLInput) (*request.Request, *waf.CreateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateWebACLOutput)
	return ret0, ret1
}

// CreateWebACLRequest indicates an expected call of CreateWebACLRequest
func (mr *MockWAFAPIMockRecorder) CreateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateWebACLRequest), arg0)
}

// CreateWebACLMigrationStack mocks base method
func (m *MockWAFAPI) CreateWebACLMigrationStack(arg0 *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACLMigrationStack", arg0)
	ret0, _ := ret[0].(*waf.CreateWebACLMigrationStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACLMigrationStack indicates an expected call of CreateWebACLMigrationStack
func (mr *MockWAFAPIMockRecorder) CreateWebACLMigrationStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLMigrationStack", reflect.TypeOf((*MockWAFAPI)(nil).CreateWebACLMigrationStack), arg0)
}

// CreateWebACLMigrationStackWithContext mocks base method
func (m *MockWAFAPI) CreateWebACLMigrationStackWithContext(arg0 aws.Context, arg1 *waf.CreateWebACLMigrationStackInput, arg2 ...request.Option) (*waf.CreateWebACLMigrationStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebACLMigrationStackWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateWebACLMigrationStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACLMigrationStackWithContext indicates an expected call of CreateWebACLMigrationStackWithContext
func (mr *MockWAFAPIMockRecorder) CreateWebACLMigrationStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLMigrationStackWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateWebACLMigrationStackWithContext), varargs...)
}

// CreateWebACLMigrationStackRequest mocks base method
func (m *MockWAFAPI) CreateWebACLMigrationStackRequest(arg0 *waf.CreateWebACLMigrationStackInput) (*request.Request, *waf.CreateWebACLMigrationStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACLMigrationStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateWebACLMigrationStackOutput)
	return ret0, ret1
}

// CreateWebACLMigrationStackRequest indicates an expected call of CreateWebACLMigrationStackRequest
func (mr *MockWAFAPIMockRecorder) CreateWebACLMigrationStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLMigrationStackRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateWebACLMigrationStackRequest), arg0)
}

// CreateXssMatchSet mocks base method
func (m *MockWAFAPI) CreateXssMatchSet(arg0 *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateXssMatchSet indicates an expected call of CreateXssMatchSet
func (mr *MockWAFAPIMockRecorder) CreateXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXssMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).CreateXssMatchSet), arg0)
}

// CreateXssMatchSetWithContext mocks base method
func (m *MockWAFAPI) CreateXssMatchSetWithContext(arg0 aws.Context, arg1 *waf.CreateXssMatchSetInput, arg2 ...request.Option) (*waf.CreateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateXssMatchSetWithContext indicates an expected call of CreateXssMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) CreateXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXssMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).CreateXssMatchSetWithContext), varargs...)
}

// CreateXssMatchSetRequest mocks base method
func (m *MockWAFAPI) CreateXssMatchSetRequest(arg0 *waf.CreateXssMatchSetInput) (*request.Request, *waf.CreateXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateXssMatchSetOutput)
	return ret0, ret1
}

// CreateXssMatchSetRequest indicates an expected call of CreateXssMatchSetRequest
func (mr *MockWAFAPIMockRecorder) CreateXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXssMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).CreateXssMatchSetRequest), arg0)
}

// DeleteByteMatchSet mocks base method
func (m *MockWAFAPI) DeleteByteMatchSet(arg0 *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByteMatchSet indicates an expected call of DeleteByteMatchSet
func (mr *MockWAFAPIMockRecorder) DeleteByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByteMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteByteMatchSet), arg0)
}

// DeleteByteMatchSetWithContext mocks base method
func (m *MockWAFAPI) DeleteByteMatchSetWithContext(arg0 aws.Context, arg1 *waf.DeleteByteMatchSetInput, arg2 ...request.Option) (*waf.DeleteByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByteMatchSetWithContext indicates an expected call of DeleteByteMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByteMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteByteMatchSetWithContext), varargs...)
}

// DeleteByteMatchSetRequest mocks base method
func (m *MockWAFAPI) DeleteByteMatchSetRequest(arg0 *waf.DeleteByteMatchSetInput) (*request.Request, *waf.DeleteByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteByteMatchSetOutput)
	return ret0, ret1
}

// DeleteByteMatchSetRequest indicates an expected call of DeleteByteMatchSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByteMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteByteMatchSetRequest), arg0)
}

// DeleteGeoMatchSet mocks base method
func (m *MockWAFAPI) DeleteGeoMatchSet(arg0 *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGeoMatchSet indicates an expected call of DeleteGeoMatchSet
func (mr *MockWAFAPIMockRecorder) DeleteGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeoMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteGeoMatchSet), arg0)
}

// DeleteGeoMatchSetWithContext mocks base method
func (m *MockWAFAPI) DeleteGeoMatchSetWithContext(arg0 aws.Context, arg1 *waf.DeleteGeoMatchSetInput, arg2 ...request.Option) (*waf.DeleteGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGeoMatchSetWithContext indicates an expected call of DeleteGeoMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeoMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteGeoMatchSetWithContext), varargs...)
}

// DeleteGeoMatchSetRequest mocks base method
func (m *MockWAFAPI) DeleteGeoMatchSetRequest(arg0 *waf.DeleteGeoMatchSetInput) (*request.Request, *waf.DeleteGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteGeoMatchSetOutput)
	return ret0, ret1
}

// DeleteGeoMatchSetRequest indicates an expected call of DeleteGeoMatchSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeoMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteGeoMatchSetRequest), arg0)
}

// DeleteIPSet mocks base method
func (m *MockWAFAPI) DeleteIPSet(arg0 *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPSet indicates an expected call of DeleteIPSet
func (mr *MockWAFAPIMockRecorder) DeleteIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteIPSet), arg0)
}

// DeleteIPSetWithContext mocks base method
func (m *MockWAFAPI) DeleteIPSetWithContext(arg0 aws.Context, arg1 *waf.DeleteIPSetInput, arg2 ...request.Option) (*waf.DeleteIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPSetWithContext indicates an expected call of DeleteIPSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteIPSetWithContext), varargs...)
}

// DeleteIPSetRequest mocks base method
func (m *MockWAFAPI) DeleteIPSetRequest(arg0 *waf.DeleteIPSetInput) (*request.Request, *waf.DeleteIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteIPSetOutput)
	return ret0, ret1
}

// DeleteIPSetRequest indicates an expected call of DeleteIPSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteIPSetRequest), arg0)
}

// DeleteLoggingConfiguration mocks base method
func (m *MockWAFAPI) DeleteLoggingConfiguration(arg0 *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*waf.DeleteLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoggingConfiguration indicates an expected call of DeleteLoggingConfiguration
func (mr *MockWAFAPIMockRecorder) DeleteLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfiguration", reflect.TypeOf((*MockWAFAPI)(nil).DeleteLoggingConfiguration), arg0)
}

// DeleteLoggingConfigurationWithContext mocks base method
func (m *MockWAFAPI) DeleteLoggingConfigurationWithContext(arg0 aws.Context, arg1 *waf.DeleteLoggingConfigurationInput, arg2 ...request.Option) (*waf.DeleteLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoggingConfigurationWithContext indicates an expected call of DeleteLoggingConfigurationWithContext
func (mr *MockWAFAPIMockRecorder) DeleteLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteLoggingConfigurationWithContext), varargs...)
}

// DeleteLoggingConfigurationRequest mocks base method
func (m *MockWAFAPI) DeleteLoggingConfigurationRequest(arg0 *waf.DeleteLoggingConfigurationInput) (*request.Request, *waf.DeleteLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteLoggingConfigurationOutput)
	return ret0, ret1
}

// DeleteLoggingConfigurationRequest indicates an expected call of DeleteLoggingConfigurationRequest
func (mr *MockWAFAPIMockRecorder) DeleteLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfigurationRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteLoggingConfigurationRequest), arg0)
}

// DeletePermissionPolicy mocks base method
func (m *MockWAFAPI) DeletePermissionPolicy(arg0 *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionPolicy", arg0)
	ret0, _ := ret[0].(*waf.DeletePermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionPolicy indicates an expected call of DeletePermissionPolicy
func (mr *MockWAFAPIMockRecorder) DeletePermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicy", reflect.TypeOf((*MockWAFAPI)(nil).DeletePermissionPolicy), arg0)
}

// DeletePermissionPolicyWithContext mocks base method
func (m *MockWAFAPI) DeletePermissionPolicyWithContext(arg0 aws.Context, arg1 *waf.DeletePermissionPolicyInput, arg2 ...request.Option) (*waf.DeletePermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeletePermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionPolicyWithContext indicates an expected call of DeletePermissionPolicyWithContext
func (mr *MockWAFAPIMockRecorder) DeletePermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicyWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeletePermissionPolicyWithContext), varargs...)
}

// DeletePermissionPolicyRequest mocks base method
func (m *MockWAFAPI) DeletePermissionPolicyRequest(arg0 *waf.DeletePermissionPolicyInput) (*request.Request, *waf.DeletePermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeletePermissionPolicyOutput)
	return ret0, ret1
}

// DeletePermissionPolicyRequest indicates an expected call of DeletePermissionPolicyRequest
func (mr *MockWAFAPIMockRecorder) DeletePermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicyRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeletePermissionPolicyRequest), arg0)
}

// DeleteRateBasedRule mocks base method
func (m *MockWAFAPI) DeleteRateBasedRule(arg0 *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.DeleteRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRateBasedRule indicates an expected call of DeleteRateBasedRule
func (mr *MockWAFAPIMockRecorder) DeleteRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateBasedRule", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRateBasedRule), arg0)
}

// DeleteRateBasedRuleWithContext mocks base method
func (m *MockWAFAPI) DeleteRateBasedRuleWithContext(arg0 aws.Context, arg1 *waf.DeleteRateBasedRuleInput, arg2 ...request.Option) (*waf.DeleteRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRateBasedRuleWithContext indicates an expected call of DeleteRateBasedRuleWithContext
func (mr *MockWAFAPIMockRecorder) DeleteRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateBasedRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRateBasedRuleWithContext), varargs...)
}

// DeleteRateBasedRuleRequest mocks base method
func (m *MockWAFAPI) DeleteRateBasedRuleRequest(arg0 *waf.DeleteRateBasedRuleInput) (*request.Request, *waf.DeleteRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRateBasedRuleOutput)
	return ret0, ret1
}

// DeleteRateBasedRuleRequest indicates an expected call of DeleteRateBasedRuleRequest
func (mr *MockWAFAPIMockRecorder) DeleteRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateBasedRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRateBasedRuleRequest), arg0)
}

// DeleteRegexMatchSet mocks base method
func (m *MockWAFAPI) DeleteRegexMatchSet(arg0 *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexMatchSet indicates an expected call of DeleteRegexMatchSet
func (mr *MockWAFAPIMockRecorder) DeleteRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRegexMatchSet), arg0)
}

// DeleteRegexMatchSetWithContext mocks base method
func (m *MockWAFAPI) DeleteRegexMatchSetWithContext(arg0 aws.Context, arg1 *waf.DeleteRegexMatchSetInput, arg2 ...request.Option) (*waf.DeleteRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexMatchSetWithContext indicates an expected call of DeleteRegexMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRegexMatchSetWithContext), varargs...)
}

// DeleteRegexMatchSetRequest mocks base method
func (m *MockWAFAPI) DeleteRegexMatchSetRequest(arg0 *waf.DeleteRegexMatchSetInput) (*request.Request, *waf.DeleteRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRegexMatchSetOutput)
	return ret0, ret1
}

// DeleteRegexMatchSetRequest indicates an expected call of DeleteRegexMatchSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRegexMatchSetRequest), arg0)
}

// DeleteRegexPatternSet mocks base method
func (m *MockWAFAPI) DeleteRegexPatternSet(arg0 *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexPatternSet indicates an expected call of DeleteRegexPatternSet
func (mr *MockWAFAPIMockRecorder) DeleteRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRegexPatternSet), arg0)
}

// DeleteRegexPatternSetWithContext mocks base method
func (m *MockWAFAPI) DeleteRegexPatternSetWithContext(arg0 aws.Context, arg1 *waf.DeleteRegexPatternSetInput, arg2 ...request.Option) (*waf.DeleteRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexPatternSetWithContext indicates an expected call of DeleteRegexPatternSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRegexPatternSetWithContext), varargs...)
}

// DeleteRegexPatternSetRequest mocks base method
func (m *MockWAFAPI) DeleteRegexPatternSetRequest(arg0 *waf.DeleteRegexPatternSetInput) (*request.Request, *waf.DeleteRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRegexPatternSetOutput)
	return ret0, ret1
}

// DeleteRegexPatternSetRequest indicates an expected call of DeleteRegexPatternSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRegexPatternSetRequest), arg0)
}

// DeleteRule mocks base method
func (m *MockWAFAPI) DeleteRule(arg0 *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(*waf.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule
func (mr *MockWAFAPIMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRule), arg0)
}

// DeleteRuleWithContext mocks base method
func (m *MockWAFAPI) DeleteRuleWithContext(arg0 aws.Context, arg1 *waf.DeleteRuleInput, arg2 ...request.Option) (*waf.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleWithContext indicates an expected call of DeleteRuleWithContext
func (mr *MockWAFAPIMockRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRuleWithContext), varargs...)
}

// DeleteRuleRequest mocks base method
func (m *MockWAFAPI) DeleteRuleRequest(arg0 *waf.DeleteRuleInput) (*request.Request, *waf.DeleteRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRuleOutput)
	return ret0, ret1
}

// DeleteRuleRequest indicates an expected call of DeleteRuleRequest
func (mr *MockWAFAPIMockRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRuleRequest), arg0)
}

// DeleteRuleGroup mocks base method
func (m *MockWAFAPI) DeleteRuleGroup(arg0 *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.DeleteRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroup indicates an expected call of DeleteRuleGroup
func (mr *MockWAFAPIMockRecorder) DeleteRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroup", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRuleGroup), arg0)
}

// DeleteRuleGroupWithContext mocks base method
func (m *MockWAFAPI) DeleteRuleGroupWithContext(arg0 aws.Context, arg1 *waf.DeleteRuleGroupInput, arg2 ...request.Option) (*waf.DeleteRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroupWithContext indicates an expected call of DeleteRuleGroupWithContext
func (mr *MockWAFAPIMockRecorder) DeleteRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRuleGroupWithContext), varargs...)
}

// DeleteRuleGroupRequest mocks base method
func (m *MockWAFAPI) DeleteRuleGroupRequest(arg0 *waf.DeleteRuleGroupInput) (*request.Request, *waf.DeleteRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRuleGroupOutput)
	return ret0, ret1
}

// DeleteRuleGroupRequest indicates an expected call of DeleteRuleGroupRequest
func (mr *MockWAFAPIMockRecorder) DeleteRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteRuleGroupRequest), arg0)
}

// DeleteSizeConstraintSet mocks base method
func (m *MockWAFAPI) DeleteSizeConstraintSet(arg0 *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSizeConstraintSet indicates an expected call of DeleteSizeConstraintSet
func (mr *MockWAFAPIMockRecorder) DeleteSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSizeConstraintSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteSizeConstraintSet), arg0)
}

// DeleteSizeConstraintSetWithContext mocks base method
func (m *MockWAFAPI) DeleteSizeConstraintSetWithContext(arg0 aws.Context, arg1 *waf.DeleteSizeConstraintSetInput, arg2 ...request.Option) (*waf.DeleteSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSizeConstraintSetWithContext indicates an expected call of DeleteSizeConstraintSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteSizeConstraintSetWithContext), varargs...)
}

// DeleteSizeConstraintSetRequest mocks base method
func (m *MockWAFAPI) DeleteSizeConstraintSetRequest(arg0 *waf.DeleteSizeConstraintSetInput) (*request.Request, *waf.DeleteSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteSizeConstraintSetOutput)
	return ret0, ret1
}

// DeleteSizeConstraintSetRequest indicates an expected call of DeleteSizeConstraintSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSizeConstraintSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteSizeConstraintSetRequest), arg0)
}

// DeleteSqlInjectionMatchSet mocks base method
func (m *MockWAFAPI) DeleteSqlInjectionMatchSet(arg0 *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSqlInjectionMatchSet indicates an expected call of DeleteSqlInjectionMatchSet
func (mr *MockWAFAPIMockRecorder) DeleteSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlInjectionMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteSqlInjectionMatchSet), arg0)
}

// DeleteSqlInjectionMatchSetWithContext mocks base method
func (m *MockWAFAPI) DeleteSqlInjectionMatchSetWithContext(arg0 aws.Context, arg1 *waf.DeleteSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSqlInjectionMatchSetWithContext indicates an expected call of DeleteSqlInjectionMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteSqlInjectionMatchSetWithContext), varargs...)
}

// DeleteSqlInjectionMatchSetRequest mocks base method
func (m *MockWAFAPI) DeleteSqlInjectionMatchSetRequest(arg0 *waf.DeleteSqlInjectionMatchSetInput) (*request.Request, *waf.DeleteSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// DeleteSqlInjectionMatchSetRequest indicates an expected call of DeleteSqlInjectionMatchSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteSqlInjectionMatchSetRequest), arg0)
}

// DeleteWebACL mocks base method
func (m *MockWAFAPI) DeleteWebACL(arg0 *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebACL", arg0)
	ret0, _ := ret[0].(*waf.DeleteWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebACL indicates an expected call of DeleteWebACL
func (mr *MockWAFAPIMockRecorder) DeleteWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACL", reflect.TypeOf((*MockWAFAPI)(nil).DeleteWebACL), arg0)
}

// DeleteWebACLWithContext mocks base method
func (m *MockWAFAPI) DeleteWebACLWithContext(arg0 aws.Context, arg1 *waf.DeleteWebACLInput, arg2 ...request.Option) (*waf.DeleteWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebACLWithContext indicates an expected call of DeleteWebACLWithContext
func (mr *MockWAFAPIMockRecorder) DeleteWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACLWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteWebACLWithContext), varargs...)
}

// DeleteWebACLRequest mocks base method
func (m *MockWAFAPI) DeleteWebACLRequest(arg0 *waf.DeleteWebACLInput) (*request.Request, *waf.DeleteWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteWebACLOutput)
	return ret0, ret1
}

// DeleteWebACLRequest indicates an expected call of DeleteWebACLRequest
func (mr *MockWAFAPIMockRecorder) DeleteWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACLRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteWebACLRequest), arg0)
}

// DeleteXssMatchSet mocks base method
func (m *MockWAFAPI) DeleteXssMatchSet(arg0 *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteXssMatchSet indicates an expected call of DeleteXssMatchSet
func (mr *MockWAFAPIMockRecorder) DeleteXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXssMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).DeleteXssMatchSet), arg0)
}

// DeleteXssMatchSetWithContext mocks base method
func (m *MockWAFAPI) DeleteXssMatchSetWithContext(arg0 aws.Context, arg1 *waf.DeleteXssMatchSetInput, arg2 ...request.Option) (*waf.DeleteXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteXssMatchSetWithContext indicates an expected call of DeleteXssMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) DeleteXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXssMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).DeleteXssMatchSetWithContext), varargs...)
}

// DeleteXssMatchSetRequest mocks base method
func (m *MockWAFAPI) DeleteXssMatchSetRequest(arg0 *waf.DeleteXssMatchSetInput) (*request.Request, *waf.DeleteXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteXssMatchSetOutput)
	return ret0, ret1
}

// DeleteXssMatchSetRequest indicates an expected call of DeleteXssMatchSetRequest
func (mr *MockWAFAPIMockRecorder) DeleteXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXssMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).DeleteXssMatchSetRequest), arg0)
}

// GetByteMatchSet mocks base method
func (m *MockWAFAPI) GetByteMatchSet(arg0 *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByteMatchSet indicates an expected call of GetByteMatchSet
func (mr *MockWAFAPIMockRecorder) GetByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).GetByteMatchSet), arg0)
}

// GetByteMatchSetWithContext mocks base method
func (m *MockWAFAPI) GetByteMatchSetWithContext(arg0 aws.Context, arg1 *waf.GetByteMatchSetInput, arg2 ...request.Option) (*waf.GetByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByteMatchSetWithContext indicates an expected call of GetByteMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) GetByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetByteMatchSetWithContext), varargs...)
}

// GetByteMatchSetRequest mocks base method
func (m *MockWAFAPI) GetByteMatchSetRequest(arg0 *waf.GetByteMatchSetInput) (*request.Request, *waf.GetByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetByteMatchSetOutput)
	return ret0, ret1
}

// GetByteMatchSetRequest indicates an expected call of GetByteMatchSetRequest
func (mr *MockWAFAPIMockRecorder) GetByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetByteMatchSetRequest), arg0)
}

// GetChangeToken mocks base method
func (m *MockWAFAPI) GetChangeToken(arg0 *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeToken", arg0)
	ret0, _ := ret[0].(*waf.GetChangeTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeToken indicates an expected call of GetChangeToken
func (mr *MockWAFAPIMockRecorder) GetChangeToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeToken", reflect.TypeOf((*MockWAFAPI)(nil).GetChangeToken), arg0)
}

// GetChangeTokenWithContext mocks base method
func (m *MockWAFAPI) GetChangeTokenWithContext(arg0 aws.Context, arg1 *waf.GetChangeTokenInput, arg2 ...request.Option) (*waf.GetChangeTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangeTokenWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetChangeTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeTokenWithContext indicates an expected call of GetChangeTokenWithContext
func (mr *MockWAFAPIMockRecorder) GetChangeTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetChangeTokenWithContext), varargs...)
}

// GetChangeTokenRequest mocks base method
func (m *MockWAFAPI) GetChangeTokenRequest(arg0 *waf.GetChangeTokenInput) (*request.Request, *waf.GetChangeTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetChangeTokenOutput)
	return ret0, ret1
}

// GetChangeTokenRequest indicates an expected call of GetChangeTokenRequest
func (mr *MockWAFAPIMockRecorder) GetChangeTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetChangeTokenRequest), arg0)
}

// GetChangeTokenStatus mocks base method
func (m *MockWAFAPI) GetChangeTokenStatus(arg0 *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeTokenStatus", arg0)
	ret0, _ := ret[0].(*waf.GetChangeTokenStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeTokenStatus indicates an expected call of GetChangeTokenStatus
func (mr *MockWAFAPIMockRecorder) GetChangeTokenStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenStatus", reflect.TypeOf((*MockWAFAPI)(nil).GetChangeTokenStatus), arg0)
}

// GetChangeTokenStatusWithContext mocks base method
func (m *MockWAFAPI) GetChangeTokenStatusWithContext(arg0 aws.Context, arg1 *waf.GetChangeTokenStatusInput, arg2 ...request.Option) (*waf.GetChangeTokenStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangeTokenStatusWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetChangeTokenStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeTokenStatusWithContext indicates an expected call of GetChangeTokenStatusWithContext
func (mr *MockWAFAPIMockRecorder) GetChangeTokenStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenStatusWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetChangeTokenStatusWithContext), varargs...)
}

// GetChangeTokenStatusRequest mocks base method
func (m *MockWAFAPI) GetChangeTokenStatusRequest(arg0 *waf.GetChangeTokenStatusInput) (*request.Request, *waf.GetChangeTokenStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeTokenStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetChangeTokenStatusOutput)
	return ret0, ret1
}

// GetChangeTokenStatusRequest indicates an expected call of GetChangeTokenStatusRequest
func (mr *MockWAFAPIMockRecorder) GetChangeTokenStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenStatusRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetChangeTokenStatusRequest), arg0)
}

// GetGeoMatchSet mocks base method
func (m *MockWAFAPI) GetGeoMatchSet(arg0 *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoMatchSet indicates an expected call of GetGeoMatchSet
func (mr *MockWAFAPIMockRecorder) GetGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).GetGeoMatchSet), arg0)
}

// GetGeoMatchSetWithContext mocks base method
func (m *MockWAFAPI) GetGeoMatchSetWithContext(arg0 aws.Context, arg1 *waf.GetGeoMatchSetInput, arg2 ...request.Option) (*waf.GetGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoMatchSetWithContext indicates an expected call of GetGeoMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) GetGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetGeoMatchSetWithContext), varargs...)
}

// GetGeoMatchSetRequest mocks base method
func (m *MockWAFAPI) GetGeoMatchSetRequest(arg0 *waf.GetGeoMatchSetInput) (*request.Request, *waf.GetGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetGeoMatchSetOutput)
	return ret0, ret1
}

// GetGeoMatchSetRequest indicates an expected call of GetGeoMatchSetRequest
func (mr *MockWAFAPIMockRecorder) GetGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetGeoMatchSetRequest), arg0)
}

// GetIPSet mocks base method
func (m *MockWAFAPI) GetIPSet(arg0 *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSet", arg0)
	ret0, _ := ret[0].(*waf.GetIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSet indicates an expected call of GetIPSet
func (mr *MockWAFAPIMockRecorder) GetIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSet", reflect.TypeOf((*MockWAFAPI)(nil).GetIPSet), arg0)
}

// GetIPSetWithContext mocks base method
func (m *MockWAFAPI) GetIPSetWithContext(arg0 aws.Context, arg1 *waf.GetIPSetInput, arg2 ...request.Option) (*waf.GetIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSetWithContext indicates an expected call of GetIPSetWithContext
func (mr *MockWAFAPIMockRecorder) GetIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetIPSetWithContext), varargs...)
}

// GetIPSetRequest mocks base method
func (m *MockWAFAPI) GetIPSetRequest(arg0 *waf.GetIPSetInput) (*request.Request, *waf.GetIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetIPSetOutput)
	return ret0, ret1
}

// GetIPSetRequest indicates an expected call of GetIPSetRequest
func (mr *MockWAFAPIMockRecorder) GetIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetIPSetRequest), arg0)
}

// GetLoggingConfiguration mocks base method
func (m *MockWAFAPI) GetLoggingConfiguration(arg0 *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*waf.GetLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingConfiguration indicates an expected call of GetLoggingConfiguration
func (mr *MockWAFAPIMockRecorder) GetLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfiguration", reflect.TypeOf((*MockWAFAPI)(nil).GetLoggingConfiguration), arg0)
}

// GetLoggingConfigurationWithContext mocks base method
func (m *MockWAFAPI) GetLoggingConfigurationWithContext(arg0 aws.Context, arg1 *waf.GetLoggingConfigurationInput, arg2 ...request.Option) (*waf.GetLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingConfigurationWithContext indicates an expected call of GetLoggingConfigurationWithContext
func (mr *MockWAFAPIMockRecorder) GetLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetLoggingConfigurationWithContext), varargs...)
}

// GetLoggingConfigurationRequest mocks base method
func (m *MockWAFAPI) GetLoggingConfigurationRequest(arg0 *waf.GetLoggingConfigurationInput) (*request.Request, *waf.GetLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetLoggingConfigurationOutput)
	return ret0, ret1
}

// GetLoggingConfigurationRequest indicates an expected call of GetLoggingConfigurationRequest
func (mr *MockWAFAPIMockRecorder) GetLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfigurationRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetLoggingConfigurationRequest), arg0)
}

// GetPermissionPolicy mocks base method
func (m *MockWAFAPI) GetPermissionPolicy(arg0 *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionPolicy", arg0)
	ret0, _ := ret[0].(*waf.GetPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionPolicy indicates an expected call of GetPermissionPolicy
func (mr *MockWAFAPIMockRecorder) GetPermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicy", reflect.TypeOf((*MockWAFAPI)(nil).GetPermissionPolicy), arg0)
}

// GetPermissionPolicyWithContext mocks base method
func (m *MockWAFAPI) GetPermissionPolicyWithContext(arg0 aws.Context, arg1 *waf.GetPermissionPolicyInput, arg2 ...request.Option) (*waf.GetPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionPolicyWithContext indicates an expected call of GetPermissionPolicyWithContext
func (mr *MockWAFAPIMockRecorder) GetPermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicyWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetPermissionPolicyWithContext), varargs...)
}

// GetPermissionPolicyRequest mocks base method
func (m *MockWAFAPI) GetPermissionPolicyRequest(arg0 *waf.GetPermissionPolicyInput) (*request.Request, *waf.GetPermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetPermissionPolicyOutput)
	return ret0, ret1
}

// GetPermissionPolicyRequest indicates an expected call of GetPermissionPolicyRequest
func (mr *MockWAFAPIMockRecorder) GetPermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicyRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetPermissionPolicyRequest), arg0)
}

// GetRateBasedRule mocks base method
func (m *MockWAFAPI) GetRateBasedRule(arg0 *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRule indicates an expected call of GetRateBasedRule
func (mr *MockWAFAPIMockRecorder) GetRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRule", reflect.TypeOf((*MockWAFAPI)(nil).GetRateBasedRule), arg0)
}

// GetRateBasedRuleWithContext mocks base method
func (m *MockWAFAPI) GetRateBasedRuleWithContext(arg0 aws.Context, arg1 *waf.GetRateBasedRuleInput, arg2 ...request.Option) (*waf.GetRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRuleWithContext indicates an expected call of GetRateBasedRuleWithContext
func (mr *MockWAFAPIMockRecorder) GetRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetRateBasedRuleWithContext), varargs...)
}

// GetRateBasedRuleRequest mocks base method
func (m *MockWAFAPI) GetRateBasedRuleRequest(arg0 *waf.GetRateBasedRuleInput) (*request.Request, *waf.GetRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRateBasedRuleOutput)
	return ret0, ret1
}

// GetRateBasedRuleRequest indicates an expected call of GetRateBasedRuleRequest
func (mr *MockWAFAPIMockRecorder) GetRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetRateBasedRuleRequest), arg0)
}

// GetRateBasedRuleManagedKeys mocks base method
func (m *MockWAFAPI) GetRateBasedRuleManagedKeys(arg0 *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRuleManagedKeys", arg0)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleManagedKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRuleManagedKeys indicates an expected call of GetRateBasedRuleManagedKeys
func (mr *MockWAFAPIMockRecorder) GetRateBasedRuleManagedKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleManagedKeys", reflect.TypeOf((*MockWAFAPI)(nil).GetRateBasedRuleManagedKeys), arg0)
}

// GetRateBasedRuleManagedKeysWithContext mocks base method
func (m *MockWAFAPI) GetRateBasedRuleManagedKeysWithContext(arg0 aws.Context, arg1 *waf.GetRateBasedRuleManagedKeysInput, arg2 ...request.Option) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRateBasedRuleManagedKeysWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleManagedKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRuleManagedKeysWithContext indicates an expected call of GetRateBasedRuleManagedKeysWithContext
func (mr *MockWAFAPIMockRecorder) GetRateBasedRuleManagedKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleManagedKeysWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetRateBasedRuleManagedKeysWithContext), varargs...)
}

// GetRateBasedRuleManagedKeysRequest mocks base method
func (m *MockWAFAPI) GetRateBasedRuleManagedKeysRequest(arg0 *waf.GetRateBasedRuleManagedKeysInput) (*request.Request, *waf.GetRateBasedRuleManagedKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRuleManagedKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRateBasedRuleManagedKeysOutput)
	return ret0, ret1
}

// GetRateBasedRuleManagedKeysRequest indicates an expected call of GetRateBasedRuleManagedKeysRequest
func (mr *MockWAFAPIMockRecorder) GetRateBasedRuleManagedKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleManagedKeysRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetRateBasedRuleManagedKeysRequest), arg0)
}

// GetRegexMatchSet mocks base method
func (m *MockWAFAPI) GetRegexMatchSet(arg0 *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexMatchSet indicates an expected call of GetRegexMatchSet
func (mr *MockWAFAPIMockRecorder) GetRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).GetRegexMatchSet), arg0)
}

// GetRegexMatchSetWithContext mocks base method
func (m *MockWAFAPI) GetRegexMatchSetWithContext(arg0 aws.Context, arg1 *waf.GetRegexMatchSetInput, arg2 ...request.Option) (*waf.GetRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexMatchSetWithContext indicates an expected call of GetRegexMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) GetRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetRegexMatchSetWithContext), varargs...)
}

// GetRegexMatchSetRequest mocks base method
func (m *MockWAFAPI) GetRegexMatchSetRequest(arg0 *waf.GetRegexMatchSetInput) (*request.Request, *waf.GetRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRegexMatchSetOutput)
	return ret0, ret1
}

// GetRegexMatchSetRequest indicates an expected call of GetRegexMatchSetRequest
func (mr *MockWAFAPIMockRecorder) GetRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetRegexMatchSetRequest), arg0)
}

// GetRegexPatternSet mocks base method
func (m *MockWAFAPI) GetRegexPatternSet(arg0 *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.GetRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexPatternSet indicates an expected call of GetRegexPatternSet
func (mr *MockWAFAPIMockRecorder) GetRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSet", reflect.TypeOf((*MockWAFAPI)(nil).GetRegexPatternSet), arg0)
}

// GetRegexPatternSetWithContext mocks base method
func (m *MockWAFAPI) GetRegexPatternSetWithContext(arg0 aws.Context, arg1 *waf.GetRegexPatternSetInput, arg2 ...request.Option) (*waf.GetRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexPatternSetWithContext indicates an expected call of GetRegexPatternSetWithContext
func (mr *MockWAFAPIMockRecorder) GetRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetRegexPatternSetWithContext), varargs...)
}

// GetRegexPatternSetRequest mocks base method
func (m *MockWAFAPI) GetRegexPatternSetRequest(arg0 *waf.GetRegexPatternSetInput) (*request.Request, *waf.GetRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRegexPatternSetOutput)
	return ret0, ret1
}

// GetRegexPatternSetRequest indicates an expected call of GetRegexPatternSetRequest
func (mr *MockWAFAPIMockRecorder) GetRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetRegexPatternSetRequest), arg0)
}

// GetRule mocks base method
func (m *MockWAFAPI) GetRule(arg0 *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0)
	ret0, _ := ret[0].(*waf.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule
func (mr *MockWAFAPIMockRecorder) GetRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockWAFAPI)(nil).GetRule), arg0)
}

// GetRuleWithContext mocks base method
func (m *MockWAFAPI) GetRuleWithContext(arg0 aws.Context, arg1 *waf.GetRuleInput, arg2 ...request.Option) (*waf.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleWithContext indicates an expected call of GetRuleWithContext
func (mr *MockWAFAPIMockRecorder) GetRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetRuleWithContext), varargs...)
}

// GetRuleRequest mocks base method
func (m *MockWAFAPI) GetRuleRequest(arg0 *waf.GetRuleInput) (*request.Request, *waf.GetRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRuleOutput)
	return ret0, ret1
}

// GetRuleRequest indicates an expected call of GetRuleRequest
func (mr *MockWAFAPIMockRecorder) GetRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetRuleRequest), arg0)
}

// GetRuleGroup mocks base method
func (m *MockWAFAPI) GetRuleGroup(arg0 *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.GetRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleGroup indicates an expected call of GetRuleGroup
func (mr *MockWAFAPIMockRecorder) GetRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroup", reflect.TypeOf((*MockWAFAPI)(nil).GetRuleGroup), arg0)
}

// GetRuleGroupWithContext mocks base method
func (m *MockWAFAPI) GetRuleGroupWithContext(arg0 aws.Context, arg1 *waf.GetRuleGroupInput, arg2 ...request.Option) (*waf.GetRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleGroupWithContext indicates an expected call of GetRuleGroupWithContext
func (mr *MockWAFAPIMockRecorder) GetRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroupWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetRuleGroupWithContext), varargs...)
}

// GetRuleGroupRequest mocks base method
func (m *MockWAFAPI) GetRuleGroupRequest(arg0 *waf.GetRuleGroupInput) (*request.Request, *waf.GetRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRuleGroupOutput)
	return ret0, ret1
}

// GetRuleGroupRequest indicates an expected call of GetRuleGroupRequest
func (mr *MockWAFAPIMockRecorder) GetRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroupRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetRuleGroupRequest), arg0)
}

// GetSampledRequests mocks base method
func (m *MockWAFAPI) GetSampledRequests(arg0 *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampledRequests", arg0)
	ret0, _ := ret[0].(*waf.GetSampledRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampledRequests indicates an expected call of GetSampledRequests
func (mr *MockWAFAPIMockRecorder) GetSampledRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequests", reflect.TypeOf((*MockWAFAPI)(nil).GetSampledRequests), arg0)
}

// GetSampledRequestsWithContext mocks base method
func (m *MockWAFAPI) GetSampledRequestsWithContext(arg0 aws.Context, arg1 *waf.GetSampledRequestsInput, arg2 ...request.Option) (*waf.GetSampledRequestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSampledRequestsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetSampledRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampledRequestsWithContext indicates an expected call of GetSampledRequestsWithContext
func (mr *MockWAFAPIMockRecorder) GetSampledRequestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequestsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetSampledRequestsWithContext), varargs...)
}

// GetSampledRequestsRequest mocks base method
func (m *MockWAFAPI) GetSampledRequestsRequest(arg0 *waf.GetSampledRequestsInput) (*request.Request, *waf.GetSampledRequestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampledRequestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetSampledRequestsOutput)
	return ret0, ret1
}

// GetSampledRequestsRequest indicates an expected call of GetSampledRequestsRequest
func (mr *MockWAFAPIMockRecorder) GetSampledRequestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequestsRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetSampledRequestsRequest), arg0)
}

// GetSizeConstraintSet mocks base method
func (m *MockWAFAPI) GetSizeConstraintSet(arg0 *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.GetSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSizeConstraintSet indicates an expected call of GetSizeConstraintSet
func (mr *MockWAFAPIMockRecorder) GetSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeConstraintSet", reflect.TypeOf((*MockWAFAPI)(nil).GetSizeConstraintSet), arg0)
}

// GetSizeConstraintSetWithContext mocks base method
func (m *MockWAFAPI) GetSizeConstraintSetWithContext(arg0 aws.Context, arg1 *waf.GetSizeConstraintSetInput, arg2 ...request.Option) (*waf.GetSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSizeConstraintSetWithContext indicates an expected call of GetSizeConstraintSetWithContext
func (mr *MockWAFAPIMockRecorder) GetSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetSizeConstraintSetWithContext), varargs...)
}

// GetSizeConstraintSetRequest mocks base method
func (m *MockWAFAPI) GetSizeConstraintSetRequest(arg0 *waf.GetSizeConstraintSetInput) (*request.Request, *waf.GetSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetSizeConstraintSetOutput)
	return ret0, ret1
}

// GetSizeConstraintSetRequest indicates an expected call of GetSizeConstraintSetRequest
func (mr *MockWAFAPIMockRecorder) GetSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeConstraintSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetSizeConstraintSetRequest), arg0)
}

// GetSqlInjectionMatchSet mocks base method
func (m *MockWAFAPI) GetSqlInjectionMatchSet(arg0 *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSqlInjectionMatchSet indicates an expected call of GetSqlInjectionMatchSet
func (mr *MockWAFAPIMockRecorder) GetSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlInjectionMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).GetSqlInjectionMatchSet), arg0)
}

// GetSqlInjectionMatchSetWithContext mocks base method
func (m *MockWAFAPI) GetSqlInjectionMatchSetWithContext(arg0 aws.Context, arg1 *waf.GetSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.GetSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSqlInjectionMatchSetWithContext indicates an expected call of GetSqlInjectionMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) GetSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetSqlInjectionMatchSetWithContext), varargs...)
}

// GetSqlInjectionMatchSetRequest mocks base method
func (m *MockWAFAPI) GetSqlInjectionMatchSetRequest(arg0 *waf.GetSqlInjectionMatchSetInput) (*request.Request, *waf.GetSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// GetSqlInjectionMatchSetRequest indicates an expected call of GetSqlInjectionMatchSetRequest
func (mr *MockWAFAPIMockRecorder) GetSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetSqlInjectionMatchSetRequest), arg0)
}

// GetWebACL mocks base method
func (m *MockWAFAPI) GetWebACL(arg0 *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACL", arg0)
	ret0, _ := ret[0].(*waf.GetWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACL indicates an expected call of GetWebACL
func (mr *MockWAFAPIMockRecorder) GetWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACL", reflect.TypeOf((*MockWAFAPI)(nil).GetWebACL), arg0)
}

// GetWebACLWithContext mocks base method
func (m *MockWAFAPI) GetWebACLWithContext(arg0 aws.Context, arg1 *waf.GetWebACLInput, arg2 ...request.Option) (*waf.GetWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLWithContext indicates an expected call of GetWebACLWithContext
func (mr *MockWAFAPIMockRecorder) GetWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetWebACLWithContext), varargs...)
}

// GetWebACLRequest mocks base method
func (m *MockWAFAPI) GetWebACLRequest(arg0 *waf.GetWebACLInput) (*request.Request, *waf.GetWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetWebACLOutput)
	return ret0, ret1
}

// GetWebACLRequest indicates an expected call of GetWebACLRequest
func (mr *MockWAFAPIMockRecorder) GetWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetWebACLRequest), arg0)
}

// GetXssMatchSet mocks base method
func (m *MockWAFAPI) GetXssMatchSet(arg0 *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXssMatchSet indicates an expected call of GetXssMatchSet
func (mr *MockWAFAPIMockRecorder) GetXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXssMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).GetXssMatchSet), arg0)
}

// GetXssMatchSetWithContext mocks base method
func (m *MockWAFAPI) GetXssMatchSetWithContext(arg0 aws.Context, arg1 *waf.GetXssMatchSetInput, arg2 ...request.Option) (*waf.GetXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXssMatchSetWithContext indicates an expected call of GetXssMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) GetXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXssMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).GetXssMatchSetWithContext), varargs...)
}

// GetXssMatchSetRequest mocks base method
func (m *MockWAFAPI) GetXssMatchSetRequest(arg0 *waf.GetXssMatchSetInput) (*request.Request, *waf.GetXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetXssMatchSetOutput)
	return ret0, ret1
}

// GetXssMatchSetRequest indicates an expected call of GetXssMatchSetRequest
func (mr *MockWAFAPIMockRecorder) GetXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXssMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).GetXssMatchSetRequest), arg0)
}

// ListActivatedRulesInRuleGroup mocks base method
func (m *MockWAFAPI) ListActivatedRulesInRuleGroup(arg0 *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivatedRulesInRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.ListActivatedRulesInRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivatedRulesInRuleGroup indicates an expected call of ListActivatedRulesInRuleGroup
func (mr *MockWAFAPIMockRecorder) ListActivatedRulesInRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivatedRulesInRuleGroup", reflect.TypeOf((*MockWAFAPI)(nil).ListActivatedRulesInRuleGroup), arg0)
}

// ListActivatedRulesInRuleGroupWithContext mocks base method
func (m *MockWAFAPI) ListActivatedRulesInRuleGroupWithContext(arg0 aws.Context, arg1 *waf.ListActivatedRulesInRuleGroupInput, arg2 ...request.Option) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActivatedRulesInRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListActivatedRulesInRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivatedRulesInRuleGroupWithContext indicates an expected call of ListActivatedRulesInRuleGroupWithContext
func (mr *MockWAFAPIMockRecorder) ListActivatedRulesInRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivatedRulesInRuleGroupWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListActivatedRulesInRuleGroupWithContext), varargs...)
}

// ListActivatedRulesInRuleGroupRequest mocks base method
func (m *MockWAFAPI) ListActivatedRulesInRuleGroupRequest(arg0 *waf.ListActivatedRulesInRuleGroupInput) (*request.Request, *waf.ListActivatedRulesInRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivatedRulesInRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListActivatedRulesInRuleGroupOutput)
	return ret0, ret1
}

// ListActivatedRulesInRuleGroupRequest indicates an expected call of ListActivatedRulesInRuleGroupRequest
func (mr *MockWAFAPIMockRecorder) ListActivatedRulesInRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivatedRulesInRuleGroupRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListActivatedRulesInRuleGroupRequest), arg0)
}

// ListByteMatchSets mocks base method
func (m *MockWAFAPI) ListByteMatchSets(arg0 *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByteMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListByteMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByteMatchSets indicates an expected call of ListByteMatchSets
func (mr *MockWAFAPIMockRecorder) ListByteMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByteMatchSets", reflect.TypeOf((*MockWAFAPI)(nil).ListByteMatchSets), arg0)
}

// ListByteMatchSetsWithContext mocks base method
func (m *MockWAFAPI) ListByteMatchSetsWithContext(arg0 aws.Context, arg1 *waf.ListByteMatchSetsInput, arg2 ...request.Option) (*waf.ListByteMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByteMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListByteMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByteMatchSetsWithContext indicates an expected call of ListByteMatchSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListByteMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByteMatchSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListByteMatchSetsWithContext), varargs...)
}

// ListByteMatchSetsRequest mocks base method
func (m *MockWAFAPI) ListByteMatchSetsRequest(arg0 *waf.ListByteMatchSetsInput) (*request.Request, *waf.ListByteMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByteMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListByteMatchSetsOutput)
	return ret0, ret1
}

// ListByteMatchSetsRequest indicates an expected call of ListByteMatchSetsRequest
func (mr *MockWAFAPIMockRecorder) ListByteMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByteMatchSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListByteMatchSetsRequest), arg0)
}

// ListGeoMatchSets mocks base method
func (m *MockWAFAPI) ListGeoMatchSets(arg0 *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeoMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListGeoMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeoMatchSets indicates an expected call of ListGeoMatchSets
func (mr *MockWAFAPIMockRecorder) ListGeoMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoMatchSets", reflect.TypeOf((*MockWAFAPI)(nil).ListGeoMatchSets), arg0)
}

// ListGeoMatchSetsWithContext mocks base method
func (m *MockWAFAPI) ListGeoMatchSetsWithContext(arg0 aws.Context, arg1 *waf.ListGeoMatchSetsInput, arg2 ...request.Option) (*waf.ListGeoMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeoMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListGeoMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeoMatchSetsWithContext indicates an expected call of ListGeoMatchSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListGeoMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoMatchSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListGeoMatchSetsWithContext), varargs...)
}

// ListGeoMatchSetsRequest mocks base method
func (m *MockWAFAPI) ListGeoMatchSetsRequest(arg0 *waf.ListGeoMatchSetsInput) (*request.Request, *waf.ListGeoMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeoMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListGeoMatchSetsOutput)
	return ret0, ret1
}

// ListGeoMatchSetsRequest indicates an expected call of ListGeoMatchSetsRequest
func (mr *MockWAFAPIMockRecorder) ListGeoMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoMatchSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListGeoMatchSetsRequest), arg0)
}

// ListIPSets mocks base method
func (m *MockWAFAPI) ListIPSets(arg0 *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPSets", arg0)
	ret0, _ := ret[0].(*waf.ListIPSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPSets indicates an expected call of ListIPSets
func (mr *MockWAFAPIMockRecorder) ListIPSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSets", reflect.TypeOf((*MockWAFAPI)(nil).ListIPSets), arg0)
}

// ListIPSetsWithContext mocks base method
func (m *MockWAFAPI) ListIPSetsWithContext(arg0 aws.Context, arg1 *waf.ListIPSetsInput, arg2 ...request.Option) (*waf.ListIPSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListIPSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPSetsWithContext indicates an expected call of ListIPSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListIPSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListIPSetsWithContext), varargs...)
}

// ListIPSetsRequest mocks base method
func (m *MockWAFAPI) ListIPSetsRequest(arg0 *waf.ListIPSetsInput) (*request.Request, *waf.ListIPSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListIPSetsOutput)
	return ret0, ret1
}

// ListIPSetsRequest indicates an expected call of ListIPSetsRequest
func (mr *MockWAFAPIMockRecorder) ListIPSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListIPSetsRequest), arg0)
}

// ListLoggingConfigurations mocks base method
func (m *MockWAFAPI) ListLoggingConfigurations(arg0 *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoggingConfigurations", arg0)
	ret0, _ := ret[0].(*waf.ListLoggingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoggingConfigurations indicates an expected call of ListLoggingConfigurations
func (mr *MockWAFAPIMockRecorder) ListLoggingConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurations", reflect.TypeOf((*MockWAFAPI)(nil).ListLoggingConfigurations), arg0)
}

// ListLoggingConfigurationsWithContext mocks base method
func (m *MockWAFAPI) ListLoggingConfigurationsWithContext(arg0 aws.Context, arg1 *waf.ListLoggingConfigurationsInput, arg2 ...request.Option) (*waf.ListLoggingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLoggingConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListLoggingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoggingConfigurationsWithContext indicates an expected call of ListLoggingConfigurationsWithContext
func (mr *MockWAFAPIMockRecorder) ListLoggingConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurationsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListLoggingConfigurationsWithContext), varargs...)
}

// ListLoggingConfigurationsRequest mocks base method
func (m *MockWAFAPI) ListLoggingConfigurationsRequest(arg0 *waf.ListLoggingConfigurationsInput) (*request.Request, *waf.ListLoggingConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoggingConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListLoggingConfigurationsOutput)
	return ret0, ret1
}

// ListLoggingConfigurationsRequest indicates an expected call of ListLoggingConfigurationsRequest
func (mr *MockWAFAPIMockRecorder) ListLoggingConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurationsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListLoggingConfigurationsRequest), arg0)
}

// ListRateBasedRules mocks base method
func (m *MockWAFAPI) ListRateBasedRules(arg0 *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRateBasedRules", arg0)
	ret0, _ := ret[0].(*waf.ListRateBasedRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateBasedRules indicates an expected call of ListRateBasedRules
func (mr *MockWAFAPIMockRecorder) ListRateBasedRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateBasedRules", reflect.TypeOf((*MockWAFAPI)(nil).ListRateBasedRules), arg0)
}

// ListRateBasedRulesWithContext mocks base method
func (m *MockWAFAPI) ListRateBasedRulesWithContext(arg0 aws.Context, arg1 *waf.ListRateBasedRulesInput, arg2 ...request.Option) (*waf.ListRateBasedRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateBasedRulesWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRateBasedRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateBasedRulesWithContext indicates an expected call of ListRateBasedRulesWithContext
func (mr *MockWAFAPIMockRecorder) ListRateBasedRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateBasedRulesWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListRateBasedRulesWithContext), varargs...)
}

// ListRateBasedRulesRequest mocks base method
func (m *MockWAFAPI) ListRateBasedRulesRequest(arg0 *waf.ListRateBasedRulesInput) (*request.Request, *waf.ListRateBasedRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRateBasedRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRateBasedRulesOutput)
	return ret0, ret1
}

// ListRateBasedRulesRequest indicates an expected call of ListRateBasedRulesRequest
func (mr *MockWAFAPIMockRecorder) ListRateBasedRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateBasedRulesRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListRateBasedRulesRequest), arg0)
}

// ListRegexMatchSets mocks base method
func (m *MockWAFAPI) ListRegexMatchSets(arg0 *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListRegexMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexMatchSets indicates an expected call of ListRegexMatchSets
func (mr *MockWAFAPIMockRecorder) ListRegexMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexMatchSets", reflect.TypeOf((*MockWAFAPI)(nil).ListRegexMatchSets), arg0)
}

// ListRegexMatchSetsWithContext mocks base method
func (m *MockWAFAPI) ListRegexMatchSetsWithContext(arg0 aws.Context, arg1 *waf.ListRegexMatchSetsInput, arg2 ...request.Option) (*waf.ListRegexMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegexMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRegexMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexMatchSetsWithContext indicates an expected call of ListRegexMatchSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListRegexMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexMatchSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListRegexMatchSetsWithContext), varargs...)
}

// ListRegexMatchSetsRequest mocks base method
func (m *MockWAFAPI) ListRegexMatchSetsRequest(arg0 *waf.ListRegexMatchSetsInput) (*request.Request, *waf.ListRegexMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRegexMatchSetsOutput)
	return ret0, ret1
}

// ListRegexMatchSetsRequest indicates an expected call of ListRegexMatchSetsRequest
func (mr *MockWAFAPIMockRecorder) ListRegexMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexMatchSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListRegexMatchSetsRequest), arg0)
}

// ListRegexPatternSets mocks base method
func (m *MockWAFAPI) ListRegexPatternSets(arg0 *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexPatternSets", arg0)
	ret0, _ := ret[0].(*waf.ListRegexPatternSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexPatternSets indicates an expected call of ListRegexPatternSets
func (mr *MockWAFAPIMockRecorder) ListRegexPatternSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSets", reflect.TypeOf((*MockWAFAPI)(nil).ListRegexPatternSets), arg0)
}

// ListRegexPatternSetsWithContext mocks base method
func (m *MockWAFAPI) ListRegexPatternSetsWithContext(arg0 aws.Context, arg1 *waf.ListRegexPatternSetsInput, arg2 ...request.Option) (*waf.ListRegexPatternSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegexPatternSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRegexPatternSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexPatternSetsWithContext indicates an expected call of ListRegexPatternSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListRegexPatternSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListRegexPatternSetsWithContext), varargs...)
}

// ListRegexPatternSetsRequest mocks base method
func (m *MockWAFAPI) ListRegexPatternSetsRequest(arg0 *waf.ListRegexPatternSetsInput) (*request.Request, *waf.ListRegexPatternSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexPatternSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRegexPatternSetsOutput)
	return ret0, ret1
}

// ListRegexPatternSetsRequest indicates an expected call of ListRegexPatternSetsRequest
func (mr *MockWAFAPIMockRecorder) ListRegexPatternSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListRegexPatternSetsRequest), arg0)
}

// ListRuleGroups mocks base method
func (m *MockWAFAPI) ListRuleGroups(arg0 *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroups", arg0)
	ret0, _ := ret[0].(*waf.ListRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroups indicates an expected call of ListRuleGroups
func (mr *MockWAFAPIMockRecorder) ListRuleGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroups", reflect.TypeOf((*MockWAFAPI)(nil).ListRuleGroups), arg0)
}

// ListRuleGroupsWithContext mocks base method
func (m *MockWAFAPI) ListRuleGroupsWithContext(arg0 aws.Context, arg1 *waf.ListRuleGroupsInput, arg2 ...request.Option) (*waf.ListRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroupsWithContext indicates an expected call of ListRuleGroupsWithContext
func (mr *MockWAFAPIMockRecorder) ListRuleGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListRuleGroupsWithContext), varargs...)
}

// ListRuleGroupsRequest mocks base method
func (m *MockWAFAPI) ListRuleGroupsRequest(arg0 *waf.ListRuleGroupsInput) (*request.Request, *waf.ListRuleGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRuleGroupsOutput)
	return ret0, ret1
}

// ListRuleGroupsRequest indicates an expected call of ListRuleGroupsRequest
func (mr *MockWAFAPIMockRecorder) ListRuleGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListRuleGroupsRequest), arg0)
}

// ListRules mocks base method
func (m *MockWAFAPI) ListRules(arg0 *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].(*waf.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules
func (mr *MockWAFAPIMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockWAFAPI)(nil).ListRules), arg0)
}

// ListRulesWithContext mocks base method
func (m *MockWAFAPI) ListRulesWithContext(arg0 aws.Context, arg1 *waf.ListRulesInput, arg2 ...request.Option) (*waf.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesWithContext indicates an expected call of ListRulesWithContext
func (mr *MockWAFAPIMockRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListRulesWithContext), varargs...)
}

// ListRulesRequest mocks base method
func (m *MockWAFAPI) ListRulesRequest(arg0 *waf.ListRulesInput) (*request.Request, *waf.ListRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRulesOutput)
	return ret0, ret1
}

// ListRulesRequest indicates an expected call of ListRulesRequest
func (mr *MockWAFAPIMockRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListRulesRequest), arg0)
}

// ListSizeConstraintSets mocks base method
func (m *MockWAFAPI) ListSizeConstraintSets(arg0 *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSizeConstraintSets", arg0)
	ret0, _ := ret[0].(*waf.ListSizeConstraintSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSizeConstraintSets indicates an expected call of ListSizeConstraintSets
func (mr *MockWAFAPIMockRecorder) ListSizeConstraintSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSizeConstraintSets", reflect.TypeOf((*MockWAFAPI)(nil).ListSizeConstraintSets), arg0)
}

// ListSizeConstraintSetsWithContext mocks base method
func (m *MockWAFAPI) ListSizeConstraintSetsWithContext(arg0 aws.Context, arg1 *waf.ListSizeConstraintSetsInput, arg2 ...request.Option) (*waf.ListSizeConstraintSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSizeConstraintSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListSizeConstraintSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSizeConstraintSetsWithContext indicates an expected call of ListSizeConstraintSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListSizeConstraintSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSizeConstraintSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListSizeConstraintSetsWithContext), varargs...)
}

// ListSizeConstraintSetsRequest mocks base method
func (m *MockWAFAPI) ListSizeConstraintSetsRequest(arg0 *waf.ListSizeConstraintSetsInput) (*request.Request, *waf.ListSizeConstraintSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSizeConstraintSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListSizeConstraintSetsOutput)
	return ret0, ret1
}

// ListSizeConstraintSetsRequest indicates an expected call of ListSizeConstraintSetsRequest
func (mr *MockWAFAPIMockRecorder) ListSizeConstraintSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSizeConstraintSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListSizeConstraintSetsRequest), arg0)
}

// ListSqlInjectionMatchSets mocks base method
func (m *MockWAFAPI) ListSqlInjectionMatchSets(arg0 *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSqlInjectionMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListSqlInjectionMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSqlInjectionMatchSets indicates an expected call of ListSqlInjectionMatchSets
func (mr *MockWAFAPIMockRecorder) ListSqlInjectionMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSqlInjectionMatchSets", reflect.TypeOf((*MockWAFAPI)(nil).ListSqlInjectionMatchSets), arg0)
}

// ListSqlInjectionMatchSetsWithContext mocks base method
func (m *MockWAFAPI) ListSqlInjectionMatchSetsWithContext(arg0 aws.Context, arg1 *waf.ListSqlInjectionMatchSetsInput, arg2 ...request.Option) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSqlInjectionMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListSqlInjectionMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSqlInjectionMatchSetsWithContext indicates an expected call of ListSqlInjectionMatchSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListSqlInjectionMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSqlInjectionMatchSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListSqlInjectionMatchSetsWithContext), varargs...)
}

// ListSqlInjectionMatchSetsRequest mocks base method
func (m *MockWAFAPI) ListSqlInjectionMatchSetsRequest(arg0 *waf.ListSqlInjectionMatchSetsInput) (*request.Request, *waf.ListSqlInjectionMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSqlInjectionMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListSqlInjectionMatchSetsOutput)
	return ret0, ret1
}

// ListSqlInjectionMatchSetsRequest indicates an expected call of ListSqlInjectionMatchSetsRequest
func (mr *MockWAFAPIMockRecorder) ListSqlInjectionMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSqlInjectionMatchSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListSqlInjectionMatchSetsRequest), arg0)
}

// ListSubscribedRuleGroups mocks base method
func (m *MockWAFAPI) ListSubscribedRuleGroups(arg0 *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribedRuleGroups", arg0)
	ret0, _ := ret[0].(*waf.ListSubscribedRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribedRuleGroups indicates an expected call of ListSubscribedRuleGroups
func (mr *MockWAFAPIMockRecorder) ListSubscribedRuleGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribedRuleGroups", reflect.TypeOf((*MockWAFAPI)(nil).ListSubscribedRuleGroups), arg0)
}

// ListSubscribedRuleGroupsWithContext mocks base method
func (m *MockWAFAPI) ListSubscribedRuleGroupsWithContext(arg0 aws.Context, arg1 *waf.ListSubscribedRuleGroupsInput, arg2 ...request.Option) (*waf.ListSubscribedRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribedRuleGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListSubscribedRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribedRuleGroupsWithContext indicates an expected call of ListSubscribedRuleGroupsWithContext
func (mr *MockWAFAPIMockRecorder) ListSubscribedRuleGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribedRuleGroupsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListSubscribedRuleGroupsWithContext), varargs...)
}

// ListSubscribedRuleGroupsRequest mocks base method
func (m *MockWAFAPI) ListSubscribedRuleGroupsRequest(arg0 *waf.ListSubscribedRuleGroupsInput) (*request.Request, *waf.ListSubscribedRuleGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribedRuleGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListSubscribedRuleGroupsOutput)
	return ret0, ret1
}

// ListSubscribedRuleGroupsRequest indicates an expected call of ListSubscribedRuleGroupsRequest
func (mr *MockWAFAPIMockRecorder) ListSubscribedRuleGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribedRuleGroupsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListSubscribedRuleGroupsRequest), arg0)
}

// ListTagsForResource mocks base method
func (m *MockWAFAPI) ListTagsForResource(arg0 *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*waf.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockWAFAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockWAFAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockWAFAPI) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *waf.ListTagsForResourceInput, arg2 ...request.Option) (*waf.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockWAFAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockWAFAPI) ListTagsForResourceRequest(arg0 *waf.ListTagsForResourceInput) (*request.Request, *waf.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockWAFAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListWebACLs mocks base method
func (m *MockWAFAPI) ListWebACLs(arg0 *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebACLs", arg0)
	ret0, _ := ret[0].(*waf.ListWebACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebACLs indicates an expected call of ListWebACLs
func (mr *MockWAFAPIMockRecorder) ListWebACLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLs", reflect.TypeOf((*MockWAFAPI)(nil).ListWebACLs), arg0)
}

// ListWebACLsWithContext mocks base method
func (m *MockWAFAPI) ListWebACLsWithContext(arg0 aws.Context, arg1 *waf.ListWebACLsInput, arg2 ...request.Option) (*waf.ListWebACLsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebACLsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListWebACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebACLsWithContext indicates an expected call of ListWebACLsWithContext
func (mr *MockWAFAPIMockRecorder) ListWebACLsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListWebACLsWithContext), varargs...)
}

// ListWebACLsRequest mocks base method
func (m *MockWAFAPI) ListWebACLsRequest(arg0 *waf.ListWebACLsInput) (*request.Request, *waf.ListWebACLsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebACLsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListWebACLsOutput)
	return ret0, ret1
}

// ListWebACLsRequest indicates an expected call of ListWebACLsRequest
func (mr *MockWAFAPIMockRecorder) ListWebACLsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListWebACLsRequest), arg0)
}

// ListXssMatchSets mocks base method
func (m *MockWAFAPI) ListXssMatchSets(arg0 *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListXssMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListXssMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXssMatchSets indicates an expected call of ListXssMatchSets
func (mr *MockWAFAPIMockRecorder) ListXssMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXssMatchSets", reflect.TypeOf((*MockWAFAPI)(nil).ListXssMatchSets), arg0)
}

// ListXssMatchSetsWithContext mocks base method
func (m *MockWAFAPI) ListXssMatchSetsWithContext(arg0 aws.Context, arg1 *waf.ListXssMatchSetsInput, arg2 ...request.Option) (*waf.ListXssMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListXssMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListXssMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXssMatchSetsWithContext indicates an expected call of ListXssMatchSetsWithContext
func (mr *MockWAFAPIMockRecorder) ListXssMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXssMatchSetsWithContext", reflect.TypeOf((*MockWAFAPI)(nil).ListXssMatchSetsWithContext), varargs...)
}

// ListXssMatchSetsRequest mocks base method
func (m *MockWAFAPI) ListXssMatchSetsRequest(arg0 *waf.ListXssMatchSetsInput) (*request.Request, *waf.ListXssMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListXssMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListXssMatchSetsOutput)
	return ret0, ret1
}

// ListXssMatchSetsRequest indicates an expected call of ListXssMatchSetsRequest
func (mr *MockWAFAPIMockRecorder) ListXssMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXssMatchSetsRequest", reflect.TypeOf((*MockWAFAPI)(nil).ListXssMatchSetsRequest), arg0)
}

// PutLoggingConfiguration mocks base method
func (m *MockWAFAPI) PutLoggingConfiguration(arg0 *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*waf.PutLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingConfiguration indicates an expected call of PutLoggingConfiguration
func (mr *MockWAFAPIMockRecorder) PutLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfiguration", reflect.TypeOf((*MockWAFAPI)(nil).PutLoggingConfiguration), arg0)
}

// PutLoggingConfigurationWithContext mocks base method
func (m *MockWAFAPI) PutLoggingConfigurationWithContext(arg0 aws.Context, arg1 *waf.PutLoggingConfigurationInput, arg2 ...request.Option) (*waf.PutLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*waf.PutLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingConfigurationWithContext indicates an expected call of PutLoggingConfigurationWithContext
func (mr *MockWAFAPIMockRecorder) PutLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFAPI)(nil).PutLoggingConfigurationWithContext), varargs...)
}

// PutLoggingConfigurationRequest mocks base method
func (m *MockWAFAPI) PutLoggingConfigurationRequest(arg0 *waf.PutLoggingConfigurationInput) (*request.Request, *waf.PutLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.PutLoggingConfigurationOutput)
	return ret0, ret1
}

// PutLoggingConfigurationRequest indicates an expected call of PutLoggingConfigurationRequest
func (mr *MockWAFAPIMockRecorder) PutLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfigurationRequest", reflect.TypeOf((*MockWAFAPI)(nil).PutLoggingConfigurationRequest), arg0)
}

// PutPermissionPolicy mocks base method
func (m *MockWAFAPI) PutPermissionPolicy(arg0 *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionPolicy", arg0)
	ret0, _ := ret[0].(*waf.PutPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionPolicy indicates an expected call of PutPermissionPolicy
func (mr *MockWAFAPIMockRecorder) PutPermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicy", reflect.TypeOf((*MockWAFAPI)(nil).PutPermissionPolicy), arg0)
}

// PutPermissionPolicyWithContext mocks base method
func (m *MockWAFAPI) PutPermissionPolicyWithContext(arg0 aws.Context, arg1 *waf.PutPermissionPolicyInput, arg2 ...request.Option) (*waf.PutPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*waf.PutPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionPolicyWithContext indicates an expected call of PutPermissionPolicyWithContext
func (mr *MockWAFAPIMockRecorder) PutPermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicyWithContext", reflect.TypeOf((*MockWAFAPI)(nil).PutPermissionPolicyWithContext), varargs...)
}

// PutPermissionPolicyRequest mocks base method
func (m *MockWAFAPI) PutPermissionPolicyRequest(arg0 *waf.PutPermissionPolicyInput) (*request.Request, *waf.PutPermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.PutPermissionPolicyOutput)
	return ret0, ret1
}

// PutPermissionPolicyRequest indicates an expected call of PutPermissionPolicyRequest
func (mr *MockWAFAPIMockRecorder) PutPermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicyRequest", reflect.TypeOf((*MockWAFAPI)(nil).PutPermissionPolicyRequest), arg0)
}

// TagResource mocks base method
func (m *MockWAFAPI) TagResource(arg0 *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*waf.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockWAFAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockWAFAPI)(nil).TagResource), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockWAFAPI) TagResourceWithContext(arg0 aws.Context, arg1 *waf.TagResourceInput, arg2 ...request.Option) (*waf.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*waf.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockWAFAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockWAFAPI)(nil).TagResourceWithContext), varargs...)
}

// TagResourceRequest mocks base method
func (m *MockWAFAPI) TagResourceRequest(arg0 *waf.TagResourceInput) (*request.Request, *waf.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockWAFAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockWAFAPI)(nil).TagResourceRequest), arg0)
}

// UntagResource mocks base method
func (m *MockWAFAPI) UntagResource(arg0 *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*waf.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockWAFAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockWAFAPI)(nil).UntagResource), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockWAFAPI) UntagResourceWithContext(arg0 aws.Context, arg1 *waf.UntagResourceInput, arg2 ...request.Option) (*waf.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockWAFAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UntagResourceWithContext), varargs...)
}

// UntagResourceRequest mocks base method
func (m *MockWAFAPI) UntagResourceRequest(arg0 *waf.UntagResourceInput) (*request.Request, *waf.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockWAFAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockWAFAPI)(nil).UntagResourceRequest), arg0)
}

// UpdateByteMatchSet mocks base method
func (m *MockWAFAPI) UpdateByteMatchSet(arg0 *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByteMatchSet indicates an expected call of UpdateByteMatchSet
func (mr *MockWAFAPIMockRecorder) UpdateByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByteMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateByteMatchSet), arg0)
}

// UpdateByteMatchSetWithContext mocks base method
func (m *MockWAFAPI) UpdateByteMatchSetWithContext(arg0 aws.Context, arg1 *waf.UpdateByteMatchSetInput, arg2 ...request.Option) (*waf.UpdateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByteMatchSetWithContext indicates an expected call of UpdateByteMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByteMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateByteMatchSetWithContext), varargs...)
}

// UpdateByteMatchSetRequest mocks base method
func (m *MockWAFAPI) UpdateByteMatchSetRequest(arg0 *waf.UpdateByteMatchSetInput) (*request.Request, *waf.UpdateByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateByteMatchSetOutput)
	return ret0, ret1
}

// UpdateByteMatchSetRequest indicates an expected call of UpdateByteMatchSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByteMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateByteMatchSetRequest), arg0)
}

// UpdateGeoMatchSet mocks base method
func (m *MockWAFAPI) UpdateGeoMatchSet(arg0 *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGeoMatchSet indicates an expected call of UpdateGeoMatchSet
func (mr *MockWAFAPIMockRecorder) UpdateGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeoMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateGeoMatchSet), arg0)
}

// UpdateGeoMatchSetWithContext mocks base method
func (m *MockWAFAPI) UpdateGeoMatchSetWithContext(arg0 aws.Context, arg1 *waf.UpdateGeoMatchSetInput, arg2 ...request.Option) (*waf.UpdateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGeoMatchSetWithContext indicates an expected call of UpdateGeoMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeoMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateGeoMatchSetWithContext), varargs...)
}

// UpdateGeoMatchSetRequest mocks base method
func (m *MockWAFAPI) UpdateGeoMatchSetRequest(arg0 *waf.UpdateGeoMatchSetInput) (*request.Request, *waf.UpdateGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateGeoMatchSetOutput)
	return ret0, ret1
}

// UpdateGeoMatchSetRequest indicates an expected call of UpdateGeoMatchSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeoMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateGeoMatchSetRequest), arg0)
}

// UpdateIPSet mocks base method
func (m *MockWAFAPI) UpdateIPSet(arg0 *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSet indicates an expected call of UpdateIPSet
func (mr *MockWAFAPIMockRecorder) UpdateIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateIPSet), arg0)
}

// UpdateIPSetWithContext mocks base method
func (m *MockWAFAPI) UpdateIPSetWithContext(arg0 aws.Context, arg1 *waf.UpdateIPSetInput, arg2 ...request.Option) (*waf.UpdateIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSetWithContext indicates an expected call of UpdateIPSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateIPSetWithContext), varargs...)
}

// UpdateIPSetRequest mocks base method
func (m *MockWAFAPI) UpdateIPSetRequest(arg0 *waf.UpdateIPSetInput) (*request.Request, *waf.UpdateIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateIPSetOutput)
	return ret0, ret1
}

// UpdateIPSetRequest indicates an expected call of UpdateIPSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateIPSetRequest), arg0)
}

// UpdateRateBasedRule mocks base method
func (m *MockWAFAPI) UpdateRateBasedRule(arg0 *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.UpdateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRateBasedRule indicates an expected call of UpdateRateBasedRule
func (mr *MockWAFAPIMockRecorder) UpdateRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateBasedRule", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRateBasedRule), arg0)
}

// UpdateRateBasedRuleWithContext mocks base method
func (m *MockWAFAPI) UpdateRateBasedRuleWithContext(arg0 aws.Context, arg1 *waf.UpdateRateBasedRuleInput, arg2 ...request.Option) (*waf.UpdateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRateBasedRuleWithContext indicates an expected call of UpdateRateBasedRuleWithContext
func (mr *MockWAFAPIMockRecorder) UpdateRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateBasedRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRateBasedRuleWithContext), varargs...)
}

// UpdateRateBasedRuleRequest mocks base method
func (m *MockWAFAPI) UpdateRateBasedRuleRequest(arg0 *waf.UpdateRateBasedRuleInput) (*request.Request, *waf.UpdateRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRateBasedRuleOutput)
	return ret0, ret1
}

// UpdateRateBasedRuleRequest indicates an expected call of UpdateRateBasedRuleRequest
func (mr *MockWAFAPIMockRecorder) UpdateRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateBasedRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRateBasedRuleRequest), arg0)
}

// UpdateRegexMatchSet mocks base method
func (m *MockWAFAPI) UpdateRegexMatchSet(arg0 *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexMatchSet indicates an expected call of UpdateRegexMatchSet
func (mr *MockWAFAPIMockRecorder) UpdateRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRegexMatchSet), arg0)
}

// UpdateRegexMatchSetWithContext mocks base method
func (m *MockWAFAPI) UpdateRegexMatchSetWithContext(arg0 aws.Context, arg1 *waf.UpdateRegexMatchSetInput, arg2 ...request.Option) (*waf.UpdateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexMatchSetWithContext indicates an expected call of UpdateRegexMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRegexMatchSetWithContext), varargs...)
}

// UpdateRegexMatchSetRequest mocks base method
func (m *MockWAFAPI) UpdateRegexMatchSetRequest(arg0 *waf.UpdateRegexMatchSetInput) (*request.Request, *waf.UpdateRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRegexMatchSetOutput)
	return ret0, ret1
}

// UpdateRegexMatchSetRequest indicates an expected call of UpdateRegexMatchSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRegexMatchSetRequest), arg0)
}

// UpdateRegexPatternSet mocks base method
func (m *MockWAFAPI) UpdateRegexPatternSet(arg0 *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexPatternSet indicates an expected call of UpdateRegexPatternSet
func (mr *MockWAFAPIMockRecorder) UpdateRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRegexPatternSet), arg0)
}

// UpdateRegexPatternSetWithContext mocks base method
func (m *MockWAFAPI) UpdateRegexPatternSetWithContext(arg0 aws.Context, arg1 *waf.UpdateRegexPatternSetInput, arg2 ...request.Option) (*waf.UpdateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexPatternSetWithContext indicates an expected call of UpdateRegexPatternSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRegexPatternSetWithContext), varargs...)
}

// UpdateRegexPatternSetRequest mocks base method
func (m *MockWAFAPI) UpdateRegexPatternSetRequest(arg0 *waf.UpdateRegexPatternSetInput) (*request.Request, *waf.UpdateRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRegexPatternSetOutput)
	return ret0, ret1
}

// UpdateRegexPatternSetRequest indicates an expected call of UpdateRegexPatternSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRegexPatternSetRequest), arg0)
}

// UpdateRule mocks base method
func (m *MockWAFAPI) UpdateRule(arg0 *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", arg0)
	ret0, _ := ret[0].(*waf.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule
func (mr *MockWAFAPIMockRecorder) UpdateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRule), arg0)
}

// UpdateRuleWithContext mocks base method
func (m *MockWAFAPI) UpdateRuleWithContext(arg0 aws.Context, arg1 *waf.UpdateRuleInput, arg2 ...request.Option) (*waf.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleWithContext indicates an expected call of UpdateRuleWithContext
func (mr *MockWAFAPIMockRecorder) UpdateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRuleWithContext), varargs...)
}

// UpdateRuleRequest mocks base method
func (m *MockWAFAPI) UpdateRuleRequest(arg0 *waf.UpdateRuleInput) (*request.Request, *waf.UpdateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRuleOutput)
	return ret0, ret1
}

// UpdateRuleRequest indicates an expected call of UpdateRuleRequest
func (mr *MockWAFAPIMockRecorder) UpdateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRuleRequest), arg0)
}

// UpdateRuleGroup mocks base method
func (m *MockWAFAPI) UpdateRuleGroup(arg0 *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.UpdateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleGroup indicates an expected call of UpdateRuleGroup
func (mr *MockWAFAPIMockRecorder) UpdateRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroup", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRuleGroup), arg0)
}

// UpdateRuleGroupWithContext mocks base method
func (m *MockWAFAPI) UpdateRuleGroupWithContext(arg0 aws.Context, arg1 *waf.UpdateRuleGroupInput, arg2 ...request.Option) (*waf.UpdateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleGroupWithContext indicates an expected call of UpdateRuleGroupWithContext
func (mr *MockWAFAPIMockRecorder) UpdateRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroupWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRuleGroupWithContext), varargs...)
}

// UpdateRuleGroupRequest mocks base method
func (m *MockWAFAPI) UpdateRuleGroupRequest(arg0 *waf.UpdateRuleGroupInput) (*request.Request, *waf.UpdateRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRuleGroupOutput)
	return ret0, ret1
}

// UpdateRuleGroupRequest indicates an expected call of UpdateRuleGroupRequest
func (mr *MockWAFAPIMockRecorder) UpdateRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroupRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateRuleGroupRequest), arg0)
}

// UpdateSizeConstraintSet mocks base method
func (m *MockWAFAPI) UpdateSizeConstraintSet(arg0 *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSizeConstraintSet indicates an expected call of UpdateSizeConstraintSet
func (mr *MockWAFAPIMockRecorder) UpdateSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSizeConstraintSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateSizeConstraintSet), arg0)
}

// UpdateSizeConstraintSetWithContext mocks base method
func (m *MockWAFAPI) UpdateSizeConstraintSetWithContext(arg0 aws.Context, arg1 *waf.UpdateSizeConstraintSetInput, arg2 ...request.Option) (*waf.UpdateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSizeConstraintSetWithContext indicates an expected call of UpdateSizeConstraintSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateSizeConstraintSetWithContext), varargs...)
}

// UpdateSizeConstraintSetRequest mocks base method
func (m *MockWAFAPI) UpdateSizeConstraintSetRequest(arg0 *waf.UpdateSizeConstraintSetInput) (*request.Request, *waf.UpdateSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateSizeConstraintSetOutput)
	return ret0, ret1
}

// UpdateSizeConstraintSetRequest indicates an expected call of UpdateSizeConstraintSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSizeConstraintSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateSizeConstraintSetRequest), arg0)
}

// UpdateSqlInjectionMatchSet mocks base method
func (m *MockWAFAPI) UpdateSqlInjectionMatchSet(arg0 *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSqlInjectionMatchSet indicates an expected call of UpdateSqlInjectionMatchSet
func (mr *MockWAFAPIMockRecorder) UpdateSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSqlInjectionMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateSqlInjectionMatchSet), arg0)
}

// UpdateSqlInjectionMatchSetWithContext mocks base method
func (m *MockWAFAPI) UpdateSqlInjectionMatchSetWithContext(arg0 aws.Context, arg1 *waf.UpdateSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSqlInjectionMatchSetWithContext indicates an expected call of UpdateSqlInjectionMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateSqlInjectionMatchSetWithContext), varargs...)
}

// UpdateSqlInjectionMatchSetRequest mocks base method
func (m *MockWAFAPI) UpdateSqlInjectionMatchSetRequest(arg0 *waf.UpdateSqlInjectionMatchSetInput) (*request.Request, *waf.UpdateSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// UpdateSqlInjectionMatchSetRequest indicates an expected call of UpdateSqlInjectionMatchSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateSqlInjectionMatchSetRequest), arg0)
}

// UpdateWebACL mocks base method
func (m *MockWAFAPI) UpdateWebACL(arg0 *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebACL", arg0)
	ret0, _ := ret[0].(*waf.UpdateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebACL indicates an expected call of UpdateWebACL
func (mr *MockWAFAPIMockRecorder) UpdateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACL", reflect.TypeOf((*MockWAFAPI)(nil).UpdateWebACL), arg0)
}

// UpdateWebACLWithContext mocks base method
func (m *MockWAFAPI) UpdateWebACLWithContext(arg0 aws.Context, arg1 *waf.UpdateWebACLInput, arg2 ...request.Option) (*waf.UpdateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebACLWithContext indicates an expected call of UpdateWebACLWithContext
func (mr *MockWAFAPIMockRecorder) UpdateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACLWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateWebACLWithContext), varargs...)
}

// UpdateWebACLRequest mocks base method
func (m *MockWAFAPI) UpdateWebACLRequest(arg0 *waf.UpdateWebACLInput) (*request.Request, *waf.UpdateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateWebACLOutput)
	return ret0, ret1
}

// UpdateWebACLRequest indicates an expected call of UpdateWebACLRequest
func (mr *MockWAFAPIMockRecorder) UpdateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACLRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateWebACLRequest), arg0)
}

// UpdateXssMatchSet mocks base method
func (m *MockWAFAPI) UpdateXssMatchSet(arg0 *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateXssMatchSet indicates an expected call of UpdateXssMatchSet
func (mr *MockWAFAPIMockRecorder) UpdateXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXssMatchSet", reflect.TypeOf((*MockWAFAPI)(nil).UpdateXssMatchSet), arg0)
}

// UpdateXssMatchSetWithContext mocks base method
func (m *MockWAFAPI) UpdateXssMatchSetWithContext(arg0 aws.Context, arg1 *waf.UpdateXssMatchSetInput, arg2 ...request.Option) (*waf.UpdateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateXssMatchSetWithContext indicates an expected call of UpdateXssMatchSetWithContext
func (mr *MockWAFAPIMockRecorder) UpdateXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXssMatchSetWithContext", reflect.TypeOf((*MockWAFAPI)(nil).UpdateXssMatchSetWithContext), varargs...)
}

// UpdateXssMatchSetRequest mocks base method
func (m *MockWAFAPI) UpdateXssMatchSetRequest(arg0 *waf.UpdateXssMatchSetInput) (*request.Request, *waf.UpdateXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateXssMatchSetOutput)
	return ret0, ret1
}

// UpdateXssMatchSetRequest indicates an expected call of UpdateXssMatchSetRequest
func (mr *MockWAFAPIMockRecorder) UpdateXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXssMatchSetRequest", reflect.TypeOf((*MockWAFAPI)(nil).UpdateXssMatchSetRequest), arg0)
}
