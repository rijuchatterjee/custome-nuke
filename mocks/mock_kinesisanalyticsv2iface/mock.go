// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/lcheung5/go/pkg/mod/github.com/aws/aws-sdk-go@v1.34.12/service/kinesisanalyticsv2/kinesisanalyticsv2iface/interface.go

// Package mock_kinesisanalyticsv2iface is a generated GoMock package.
package mock_kinesisanalyticsv2iface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	kinesisanalyticsv2 "github.com/aws/aws-sdk-go/service/kinesisanalyticsv2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKinesisAnalyticsV2API is a mock of KinesisAnalyticsV2API interface
type MockKinesisAnalyticsV2API struct {
	ctrl     *gomock.Controller
	recorder *MockKinesisAnalyticsV2APIMockRecorder
}

// MockKinesisAnalyticsV2APIMockRecorder is the mock recorder for MockKinesisAnalyticsV2API
type MockKinesisAnalyticsV2APIMockRecorder struct {
	mock *MockKinesisAnalyticsV2API
}

// NewMockKinesisAnalyticsV2API creates a new mock instance
func NewMockKinesisAnalyticsV2API(ctrl *gomock.Controller) *MockKinesisAnalyticsV2API {
	mock := &MockKinesisAnalyticsV2API{ctrl: ctrl}
	mock.recorder = &MockKinesisAnalyticsV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKinesisAnalyticsV2API) EXPECT() *MockKinesisAnalyticsV2APIMockRecorder {
	return m.recorder
}

// AddApplicationCloudWatchLoggingOption mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationCloudWatchLoggingOption(arg0 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationCloudWatchLoggingOption", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationCloudWatchLoggingOption indicates an expected call of AddApplicationCloudWatchLoggingOption
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationCloudWatchLoggingOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationCloudWatchLoggingOption", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationCloudWatchLoggingOption), arg0)
}

// AddApplicationCloudWatchLoggingOptionWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationCloudWatchLoggingOptionWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, arg2 ...request.Option) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApplicationCloudWatchLoggingOptionWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationCloudWatchLoggingOptionWithContext indicates an expected call of AddApplicationCloudWatchLoggingOptionWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationCloudWatchLoggingOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationCloudWatchLoggingOptionWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationCloudWatchLoggingOptionWithContext), varargs...)
}

// AddApplicationCloudWatchLoggingOptionRequest mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationCloudWatchLoggingOptionRequest(arg0 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) (*request.Request, *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationCloudWatchLoggingOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)
	return ret0, ret1
}

// AddApplicationCloudWatchLoggingOptionRequest indicates an expected call of AddApplicationCloudWatchLoggingOptionRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationCloudWatchLoggingOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationCloudWatchLoggingOptionRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationCloudWatchLoggingOptionRequest), arg0)
}

// AddApplicationInput mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationInput(arg0 *kinesisanalyticsv2.AddApplicationInputInput) (*kinesisanalyticsv2.AddApplicationInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationInput", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationInput indicates an expected call of AddApplicationInput
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationInput", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationInput), arg0)
}

// AddApplicationInputWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationInputWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.AddApplicationInputInput, arg2 ...request.Option) (*kinesisanalyticsv2.AddApplicationInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApplicationInputWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationInputWithContext indicates an expected call of AddApplicationInputWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationInputWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationInputWithContext), varargs...)
}

// AddApplicationInputRequest mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationInputRequest(arg0 *kinesisanalyticsv2.AddApplicationInputInput) (*request.Request, *kinesisanalyticsv2.AddApplicationInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.AddApplicationInputOutput)
	return ret0, ret1
}

// AddApplicationInputRequest indicates an expected call of AddApplicationInputRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationInputRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationInputRequest), arg0)
}

// AddApplicationInputProcessingConfiguration mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationInputProcessingConfiguration(arg0 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationInputProcessingConfiguration", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationInputProcessingConfiguration indicates an expected call of AddApplicationInputProcessingConfiguration
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationInputProcessingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationInputProcessingConfiguration", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationInputProcessingConfiguration), arg0)
}

// AddApplicationInputProcessingConfigurationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationInputProcessingConfigurationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, arg2 ...request.Option) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApplicationInputProcessingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationInputProcessingConfigurationWithContext indicates an expected call of AddApplicationInputProcessingConfigurationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationInputProcessingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationInputProcessingConfigurationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationInputProcessingConfigurationWithContext), varargs...)
}

// AddApplicationInputProcessingConfigurationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationInputProcessingConfigurationRequest(arg0 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) (*request.Request, *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationInputProcessingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)
	return ret0, ret1
}

// AddApplicationInputProcessingConfigurationRequest indicates an expected call of AddApplicationInputProcessingConfigurationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationInputProcessingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationInputProcessingConfigurationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationInputProcessingConfigurationRequest), arg0)
}

// AddApplicationOutput mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationOutput(arg0 *kinesisanalyticsv2.AddApplicationOutputInput) (*kinesisanalyticsv2.AddApplicationOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationOutput", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationOutput indicates an expected call of AddApplicationOutput
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationOutput", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationOutput), arg0)
}

// AddApplicationOutputWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationOutputWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.AddApplicationOutputInput, arg2 ...request.Option) (*kinesisanalyticsv2.AddApplicationOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApplicationOutputWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationOutputWithContext indicates an expected call of AddApplicationOutputWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationOutputWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationOutputWithContext), varargs...)
}

// AddApplicationOutputRequest mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationOutputRequest(arg0 *kinesisanalyticsv2.AddApplicationOutputInput) (*request.Request, *kinesisanalyticsv2.AddApplicationOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.AddApplicationOutputOutput)
	return ret0, ret1
}

// AddApplicationOutputRequest indicates an expected call of AddApplicationOutputRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationOutputRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationOutputRequest), arg0)
}

// AddApplicationReferenceDataSource mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationReferenceDataSource(arg0 *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationReferenceDataSource", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationReferenceDataSource indicates an expected call of AddApplicationReferenceDataSource
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationReferenceDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationReferenceDataSource", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationReferenceDataSource), arg0)
}

// AddApplicationReferenceDataSourceWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationReferenceDataSourceWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, arg2 ...request.Option) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApplicationReferenceDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationReferenceDataSourceWithContext indicates an expected call of AddApplicationReferenceDataSourceWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationReferenceDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationReferenceDataSourceWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationReferenceDataSourceWithContext), varargs...)
}

// AddApplicationReferenceDataSourceRequest mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationReferenceDataSourceRequest(arg0 *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) (*request.Request, *kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationReferenceDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)
	return ret0, ret1
}

// AddApplicationReferenceDataSourceRequest indicates an expected call of AddApplicationReferenceDataSourceRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationReferenceDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationReferenceDataSourceRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationReferenceDataSourceRequest), arg0)
}

// AddApplicationVpcConfiguration mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationVpcConfiguration(arg0 *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationVpcConfiguration", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationVpcConfiguration indicates an expected call of AddApplicationVpcConfiguration
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationVpcConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationVpcConfiguration", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationVpcConfiguration), arg0)
}

// AddApplicationVpcConfigurationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationVpcConfigurationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, arg2 ...request.Option) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddApplicationVpcConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplicationVpcConfigurationWithContext indicates an expected call of AddApplicationVpcConfigurationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationVpcConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationVpcConfigurationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationVpcConfigurationWithContext), varargs...)
}

// AddApplicationVpcConfigurationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) AddApplicationVpcConfigurationRequest(arg0 *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) (*request.Request, *kinesisanalyticsv2.AddApplicationVpcConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplicationVpcConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)
	return ret0, ret1
}

// AddApplicationVpcConfigurationRequest indicates an expected call of AddApplicationVpcConfigurationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) AddApplicationVpcConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplicationVpcConfigurationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).AddApplicationVpcConfigurationRequest), arg0)
}

// CreateApplication mocks base method
func (m *MockKinesisAnalyticsV2API) CreateApplication(arg0 *kinesisanalyticsv2.CreateApplicationInput) (*kinesisanalyticsv2.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockKinesisAnalyticsV2APIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).CreateApplication), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) CreateApplicationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.CreateApplicationInput, arg2 ...request.Option) (*kinesisanalyticsv2.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).CreateApplicationWithContext), varargs...)
}

// CreateApplicationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) CreateApplicationRequest(arg0 *kinesisanalyticsv2.CreateApplicationInput) (*request.Request, *kinesisanalyticsv2.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationSnapshot mocks base method
func (m *MockKinesisAnalyticsV2API) CreateApplicationSnapshot(arg0 *kinesisanalyticsv2.CreateApplicationSnapshotInput) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationSnapshot", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.CreateApplicationSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationSnapshot indicates an expected call of CreateApplicationSnapshot
func (mr *MockKinesisAnalyticsV2APIMockRecorder) CreateApplicationSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSnapshot", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).CreateApplicationSnapshot), arg0)
}

// CreateApplicationSnapshotWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) CreateApplicationSnapshotWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.CreateApplicationSnapshotInput, arg2 ...request.Option) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.CreateApplicationSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationSnapshotWithContext indicates an expected call of CreateApplicationSnapshotWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) CreateApplicationSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSnapshotWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).CreateApplicationSnapshotWithContext), varargs...)
}

// CreateApplicationSnapshotRequest mocks base method
func (m *MockKinesisAnalyticsV2API) CreateApplicationSnapshotRequest(arg0 *kinesisanalyticsv2.CreateApplicationSnapshotInput) (*request.Request, *kinesisanalyticsv2.CreateApplicationSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.CreateApplicationSnapshotOutput)
	return ret0, ret1
}

// CreateApplicationSnapshotRequest indicates an expected call of CreateApplicationSnapshotRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) CreateApplicationSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSnapshotRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).CreateApplicationSnapshotRequest), arg0)
}

// DeleteApplication mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplication(arg0 *kinesisanalyticsv2.DeleteApplicationInput) (*kinesisanalyticsv2.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplication), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DeleteApplicationInput, arg2 ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteApplicationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationRequest(arg0 *kinesisanalyticsv2.DeleteApplicationInput) (*request.Request, *kinesisanalyticsv2.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationCloudWatchLoggingOption mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationCloudWatchLoggingOption(arg0 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationCloudWatchLoggingOption", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationCloudWatchLoggingOption indicates an expected call of DeleteApplicationCloudWatchLoggingOption
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationCloudWatchLoggingOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationCloudWatchLoggingOption", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationCloudWatchLoggingOption), arg0)
}

// DeleteApplicationCloudWatchLoggingOptionWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationCloudWatchLoggingOptionWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, arg2 ...request.Option) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationCloudWatchLoggingOptionWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationCloudWatchLoggingOptionWithContext indicates an expected call of DeleteApplicationCloudWatchLoggingOptionWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationCloudWatchLoggingOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationCloudWatchLoggingOptionWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationCloudWatchLoggingOptionWithContext), varargs...)
}

// DeleteApplicationCloudWatchLoggingOptionRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationCloudWatchLoggingOptionRequest(arg0 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) (*request.Request, *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationCloudWatchLoggingOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)
	return ret0, ret1
}

// DeleteApplicationCloudWatchLoggingOptionRequest indicates an expected call of DeleteApplicationCloudWatchLoggingOptionRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationCloudWatchLoggingOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationCloudWatchLoggingOptionRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationCloudWatchLoggingOptionRequest), arg0)
}

// DeleteApplicationInputProcessingConfiguration mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationInputProcessingConfiguration(arg0 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationInputProcessingConfiguration", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationInputProcessingConfiguration indicates an expected call of DeleteApplicationInputProcessingConfiguration
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationInputProcessingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationInputProcessingConfiguration", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationInputProcessingConfiguration), arg0)
}

// DeleteApplicationInputProcessingConfigurationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationInputProcessingConfigurationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, arg2 ...request.Option) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationInputProcessingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationInputProcessingConfigurationWithContext indicates an expected call of DeleteApplicationInputProcessingConfigurationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationInputProcessingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationInputProcessingConfigurationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationInputProcessingConfigurationWithContext), varargs...)
}

// DeleteApplicationInputProcessingConfigurationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationInputProcessingConfigurationRequest(arg0 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) (*request.Request, *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationInputProcessingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)
	return ret0, ret1
}

// DeleteApplicationInputProcessingConfigurationRequest indicates an expected call of DeleteApplicationInputProcessingConfigurationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationInputProcessingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationInputProcessingConfigurationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationInputProcessingConfigurationRequest), arg0)
}

// DeleteApplicationOutput mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationOutput(arg0 *kinesisanalyticsv2.DeleteApplicationOutputInput) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationOutput", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationOutput indicates an expected call of DeleteApplicationOutput
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationOutput", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationOutput), arg0)
}

// DeleteApplicationOutputWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationOutputWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DeleteApplicationOutputInput, arg2 ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationOutputWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationOutputWithContext indicates an expected call of DeleteApplicationOutputWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationOutputWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationOutputWithContext), varargs...)
}

// DeleteApplicationOutputRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationOutputRequest(arg0 *kinesisanalyticsv2.DeleteApplicationOutputInput) (*request.Request, *kinesisanalyticsv2.DeleteApplicationOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DeleteApplicationOutputOutput)
	return ret0, ret1
}

// DeleteApplicationOutputRequest indicates an expected call of DeleteApplicationOutputRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationOutputRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationOutputRequest), arg0)
}

// DeleteApplicationReferenceDataSource mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationReferenceDataSource(arg0 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationReferenceDataSource", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationReferenceDataSource indicates an expected call of DeleteApplicationReferenceDataSource
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationReferenceDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationReferenceDataSource", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationReferenceDataSource), arg0)
}

// DeleteApplicationReferenceDataSourceWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationReferenceDataSourceWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, arg2 ...request.Option) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationReferenceDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationReferenceDataSourceWithContext indicates an expected call of DeleteApplicationReferenceDataSourceWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationReferenceDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationReferenceDataSourceWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationReferenceDataSourceWithContext), varargs...)
}

// DeleteApplicationReferenceDataSourceRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationReferenceDataSourceRequest(arg0 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) (*request.Request, *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationReferenceDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)
	return ret0, ret1
}

// DeleteApplicationReferenceDataSourceRequest indicates an expected call of DeleteApplicationReferenceDataSourceRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationReferenceDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationReferenceDataSourceRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationReferenceDataSourceRequest), arg0)
}

// DeleteApplicationSnapshot mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationSnapshot(arg0 *kinesisanalyticsv2.DeleteApplicationSnapshotInput) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationSnapshot", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationSnapshot indicates an expected call of DeleteApplicationSnapshot
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationSnapshot", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationSnapshot), arg0)
}

// DeleteApplicationSnapshotWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationSnapshotWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DeleteApplicationSnapshotInput, arg2 ...request.Option) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationSnapshotWithContext indicates an expected call of DeleteApplicationSnapshotWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationSnapshotWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationSnapshotWithContext), varargs...)
}

// DeleteApplicationSnapshotRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationSnapshotRequest(arg0 *kinesisanalyticsv2.DeleteApplicationSnapshotInput) (*request.Request, *kinesisanalyticsv2.DeleteApplicationSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)
	return ret0, ret1
}

// DeleteApplicationSnapshotRequest indicates an expected call of DeleteApplicationSnapshotRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationSnapshotRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationSnapshotRequest), arg0)
}

// DeleteApplicationVpcConfiguration mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationVpcConfiguration(arg0 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationVpcConfiguration", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationVpcConfiguration indicates an expected call of DeleteApplicationVpcConfiguration
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationVpcConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationVpcConfiguration", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationVpcConfiguration), arg0)
}

// DeleteApplicationVpcConfigurationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationVpcConfigurationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, arg2 ...request.Option) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationVpcConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationVpcConfigurationWithContext indicates an expected call of DeleteApplicationVpcConfigurationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationVpcConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationVpcConfigurationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationVpcConfigurationWithContext), varargs...)
}

// DeleteApplicationVpcConfigurationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DeleteApplicationVpcConfigurationRequest(arg0 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) (*request.Request, *kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationVpcConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)
	return ret0, ret1
}

// DeleteApplicationVpcConfigurationRequest indicates an expected call of DeleteApplicationVpcConfigurationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DeleteApplicationVpcConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationVpcConfigurationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DeleteApplicationVpcConfigurationRequest), arg0)
}

// DescribeApplication mocks base method
func (m *MockKinesisAnalyticsV2API) DescribeApplication(arg0 *kinesisanalyticsv2.DescribeApplicationInput) (*kinesisanalyticsv2.DescribeApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplication", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DescribeApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplication indicates an expected call of DescribeApplication
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DescribeApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplication", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DescribeApplication), arg0)
}

// DescribeApplicationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DescribeApplicationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DescribeApplicationInput, arg2 ...request.Option) (*kinesisanalyticsv2.DescribeApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DescribeApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationWithContext indicates an expected call of DescribeApplicationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DescribeApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DescribeApplicationWithContext), varargs...)
}

// DescribeApplicationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DescribeApplicationRequest(arg0 *kinesisanalyticsv2.DescribeApplicationInput) (*request.Request, *kinesisanalyticsv2.DescribeApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DescribeApplicationOutput)
	return ret0, ret1
}

// DescribeApplicationRequest indicates an expected call of DescribeApplicationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DescribeApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DescribeApplicationRequest), arg0)
}

// DescribeApplicationSnapshot mocks base method
func (m *MockKinesisAnalyticsV2API) DescribeApplicationSnapshot(arg0 *kinesisanalyticsv2.DescribeApplicationSnapshotInput) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationSnapshot", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationSnapshot indicates an expected call of DescribeApplicationSnapshot
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DescribeApplicationSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationSnapshot", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DescribeApplicationSnapshot), arg0)
}

// DescribeApplicationSnapshotWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DescribeApplicationSnapshotWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DescribeApplicationSnapshotInput, arg2 ...request.Option) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationSnapshotWithContext indicates an expected call of DescribeApplicationSnapshotWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DescribeApplicationSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationSnapshotWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DescribeApplicationSnapshotWithContext), varargs...)
}

// DescribeApplicationSnapshotRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DescribeApplicationSnapshotRequest(arg0 *kinesisanalyticsv2.DescribeApplicationSnapshotInput) (*request.Request, *kinesisanalyticsv2.DescribeApplicationSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)
	return ret0, ret1
}

// DescribeApplicationSnapshotRequest indicates an expected call of DescribeApplicationSnapshotRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DescribeApplicationSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationSnapshotRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DescribeApplicationSnapshotRequest), arg0)
}

// DiscoverInputSchema mocks base method
func (m *MockKinesisAnalyticsV2API) DiscoverInputSchema(arg0 *kinesisanalyticsv2.DiscoverInputSchemaInput) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverInputSchema", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DiscoverInputSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverInputSchema indicates an expected call of DiscoverInputSchema
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DiscoverInputSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverInputSchema", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DiscoverInputSchema), arg0)
}

// DiscoverInputSchemaWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) DiscoverInputSchemaWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.DiscoverInputSchemaInput, arg2 ...request.Option) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DiscoverInputSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.DiscoverInputSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverInputSchemaWithContext indicates an expected call of DiscoverInputSchemaWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DiscoverInputSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverInputSchemaWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DiscoverInputSchemaWithContext), varargs...)
}

// DiscoverInputSchemaRequest mocks base method
func (m *MockKinesisAnalyticsV2API) DiscoverInputSchemaRequest(arg0 *kinesisanalyticsv2.DiscoverInputSchemaInput) (*request.Request, *kinesisanalyticsv2.DiscoverInputSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverInputSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.DiscoverInputSchemaOutput)
	return ret0, ret1
}

// DiscoverInputSchemaRequest indicates an expected call of DiscoverInputSchemaRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) DiscoverInputSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverInputSchemaRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).DiscoverInputSchemaRequest), arg0)
}

// ListApplicationSnapshots mocks base method
func (m *MockKinesisAnalyticsV2API) ListApplicationSnapshots(arg0 *kinesisanalyticsv2.ListApplicationSnapshotsInput) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationSnapshots", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.ListApplicationSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationSnapshots indicates an expected call of ListApplicationSnapshots
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListApplicationSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSnapshots", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListApplicationSnapshots), arg0)
}

// ListApplicationSnapshotsWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) ListApplicationSnapshotsWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.ListApplicationSnapshotsInput, arg2 ...request.Option) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.ListApplicationSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationSnapshotsWithContext indicates an expected call of ListApplicationSnapshotsWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListApplicationSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSnapshotsWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListApplicationSnapshotsWithContext), varargs...)
}

// ListApplicationSnapshotsRequest mocks base method
func (m *MockKinesisAnalyticsV2API) ListApplicationSnapshotsRequest(arg0 *kinesisanalyticsv2.ListApplicationSnapshotsInput) (*request.Request, *kinesisanalyticsv2.ListApplicationSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.ListApplicationSnapshotsOutput)
	return ret0, ret1
}

// ListApplicationSnapshotsRequest indicates an expected call of ListApplicationSnapshotsRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListApplicationSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSnapshotsRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListApplicationSnapshotsRequest), arg0)
}

// ListApplications mocks base method
func (m *MockKinesisAnalyticsV2API) ListApplications(arg0 *kinesisanalyticsv2.ListApplicationsInput) (*kinesisanalyticsv2.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListApplications), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) ListApplicationsWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.ListApplicationsInput, arg2 ...request.Option) (*kinesisanalyticsv2.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListApplicationsWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockKinesisAnalyticsV2API) ListApplicationsRequest(arg0 *kinesisanalyticsv2.ListApplicationsInput) (*request.Request, *kinesisanalyticsv2.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListApplicationsRequest), arg0)
}

// ListTagsForResource mocks base method
func (m *MockKinesisAnalyticsV2API) ListTagsForResource(arg0 *kinesisanalyticsv2.ListTagsForResourceInput) (*kinesisanalyticsv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.ListTagsForResourceInput, arg2 ...request.Option) (*kinesisanalyticsv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockKinesisAnalyticsV2API) ListTagsForResourceRequest(arg0 *kinesisanalyticsv2.ListTagsForResourceInput) (*request.Request, *kinesisanalyticsv2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).ListTagsForResourceRequest), arg0)
}

// StartApplication mocks base method
func (m *MockKinesisAnalyticsV2API) StartApplication(arg0 *kinesisanalyticsv2.StartApplicationInput) (*kinesisanalyticsv2.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplication", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplication indicates an expected call of StartApplication
func (mr *MockKinesisAnalyticsV2APIMockRecorder) StartApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplication", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).StartApplication), arg0)
}

// StartApplicationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) StartApplicationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.StartApplicationInput, arg2 ...request.Option) (*kinesisanalyticsv2.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplicationWithContext indicates an expected call of StartApplicationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) StartApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).StartApplicationWithContext), varargs...)
}

// StartApplicationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) StartApplicationRequest(arg0 *kinesisanalyticsv2.StartApplicationInput) (*request.Request, *kinesisanalyticsv2.StartApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.StartApplicationOutput)
	return ret0, ret1
}

// StartApplicationRequest indicates an expected call of StartApplicationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) StartApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).StartApplicationRequest), arg0)
}

// StopApplication mocks base method
func (m *MockKinesisAnalyticsV2API) StopApplication(arg0 *kinesisanalyticsv2.StopApplicationInput) (*kinesisanalyticsv2.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplication", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplication indicates an expected call of StopApplication
func (mr *MockKinesisAnalyticsV2APIMockRecorder) StopApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplication", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).StopApplication), arg0)
}

// StopApplicationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) StopApplicationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.StopApplicationInput, arg2 ...request.Option) (*kinesisanalyticsv2.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplicationWithContext indicates an expected call of StopApplicationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) StopApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).StopApplicationWithContext), varargs...)
}

// StopApplicationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) StopApplicationRequest(arg0 *kinesisanalyticsv2.StopApplicationInput) (*request.Request, *kinesisanalyticsv2.StopApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.StopApplicationOutput)
	return ret0, ret1
}

// StopApplicationRequest indicates an expected call of StopApplicationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) StopApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).StopApplicationRequest), arg0)
}

// TagResource mocks base method
func (m *MockKinesisAnalyticsV2API) TagResource(arg0 *kinesisanalyticsv2.TagResourceInput) (*kinesisanalyticsv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockKinesisAnalyticsV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).TagResource), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) TagResourceWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.TagResourceInput, arg2 ...request.Option) (*kinesisanalyticsv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).TagResourceWithContext), varargs...)
}

// TagResourceRequest mocks base method
func (m *MockKinesisAnalyticsV2API) TagResourceRequest(arg0 *kinesisanalyticsv2.TagResourceInput) (*request.Request, *kinesisanalyticsv2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).TagResourceRequest), arg0)
}

// UntagResource mocks base method
func (m *MockKinesisAnalyticsV2API) UntagResource(arg0 *kinesisanalyticsv2.UntagResourceInput) (*kinesisanalyticsv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockKinesisAnalyticsV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).UntagResource), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) UntagResourceWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.UntagResourceInput, arg2 ...request.Option) (*kinesisanalyticsv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).UntagResourceWithContext), varargs...)
}

// UntagResourceRequest mocks base method
func (m *MockKinesisAnalyticsV2API) UntagResourceRequest(arg0 *kinesisanalyticsv2.UntagResourceInput) (*request.Request, *kinesisanalyticsv2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).UntagResourceRequest), arg0)
}

// UpdateApplication mocks base method
func (m *MockKinesisAnalyticsV2API) UpdateApplication(arg0 *kinesisanalyticsv2.UpdateApplicationInput) (*kinesisanalyticsv2.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*kinesisanalyticsv2.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockKinesisAnalyticsV2APIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).UpdateApplication), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockKinesisAnalyticsV2API) UpdateApplicationWithContext(arg0 aws.Context, arg1 *kinesisanalyticsv2.UpdateApplicationInput, arg2 ...request.Option) (*kinesisanalyticsv2.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisanalyticsv2.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockKinesisAnalyticsV2APIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).UpdateApplicationWithContext), varargs...)
}

// UpdateApplicationRequest mocks base method
func (m *MockKinesisAnalyticsV2API) UpdateApplicationRequest(arg0 *kinesisanalyticsv2.UpdateApplicationInput) (*request.Request, *kinesisanalyticsv2.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisanalyticsv2.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockKinesisAnalyticsV2APIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockKinesisAnalyticsV2API)(nil).UpdateApplicationRequest), arg0)
}
